/**
 * timelight
 * This is the timelight api.
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/// <reference path="../src/custom.d.ts" />
import { Configuration } from "./configuration";
/**
 *
 * @export
 */
export declare const COLLECTION_FORMATS: {
    csv: string;
    ssv: string;
    tsv: string;
    pipes: string;
};
/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}
/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}
/**
 *
 * @export
 * @class BaseAPI
 */
export declare class BaseAPI {
    protected basePath: string;
    protected fetch: FetchAPI;
    protected configuration: Configuration;
    constructor(configuration?: Configuration, basePath?: string, fetch?: FetchAPI);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export declare class RequiredError extends Error {
    field: string;
    name: "RequiredError";
    constructor(field: string, msg?: string);
}
/**
 *
 * @export
 * @interface AlertCommentDto
 */
export interface AlertCommentDto {
    /**
     * The text comment to set on the alert, max of 5000 characters
     * @type {string}
     * @memberof AlertCommentDto
     */
    comment: string;
}
/**
 *
 * @export
 * @interface AlertDto
 */
export interface AlertDto {
    /**
     *
     * @type {number}
     * @memberof AlertDto
     */
    id: number;
    /**
     *
     * @type {number}
     * @memberof AlertDto
     */
    source_id: number;
    /**
     *
     * @type {string}
     * @memberof AlertDto
     */
    date: string;
    /**
     *
     * @type {number}
     * @memberof AlertDto
     */
    criticity: number;
    /**
     *
     * @type {boolean}
     * @memberof AlertDto
     */
    shape: boolean;
    /**
     *
     * @type {string}
     * @memberof AlertDto
     */
    activity: AlertDto.ActivityEnum;
    /**
     *
     * @type {number}
     * @memberof AlertDto
     */
    better_model_id: number;
    /**
     *
     * @type {number}
     * @memberof AlertDto
     */
    closest_model_id: number;
    /**
     *
     * @type {boolean}
     * @memberof AlertDto
     */
    favorite: boolean;
}
/**
 * @export
 * @namespace AlertDto
 */
export declare namespace AlertDto {
    /**
     * @export
     * @enum {string}
     */
    enum ActivityEnum {
        Over,
        Under
    }
}
/**
 *
 * @export
 * @interface AlertFavoriteDto
 */
export interface AlertFavoriteDto {
    /**
     * True to be set as favorite, false otherwise
     * @type {boolean}
     * @memberof AlertFavoriteDto
     */
    favorite: boolean;
}
/**
 *
 * @export
 * @interface AlertListDto
 */
export interface AlertListDto {
    /**
     * List of alerts
     * @type {Array<AlertDto>}
     * @memberof AlertListDto
     */
    alerts: Array<AlertDto>;
}
/**
 *
 * @export
 * @interface AlertRefDto
 */
export interface AlertRefDto {
    /**
     *
     * @type {number}
     * @memberof AlertRefDto
     */
    id: number;
    /**
     *
     * @type {number}
     * @memberof AlertRefDto
     */
    source_id: number;
    /**
     *
     * @type {string}
     * @memberof AlertRefDto
     */
    date: string;
    /**
     *
     * @type {number}
     * @memberof AlertRefDto
     */
    criticity: number;
    /**
     *
     * @type {boolean}
     * @memberof AlertRefDto
     */
    shape: boolean;
    /**
     *
     * @type {string}
     * @memberof AlertRefDto
     */
    activity: AlertRefDto.ActivityEnum;
    /**
     *
     * @type {string}
     * @memberof AlertRefDto
     */
    comment: string;
    /**
     *
     * @type {Array<number>}
     * @memberof AlertRefDto
     */
    dayActivity: Array<number>;
    /**
     *
     * @type {string}
     * @memberof AlertRefDto
     */
    betterModelName: string;
    /**
     *
     * @type {number}
     * @memberof AlertRefDto
     */
    betterModelValue: number;
    /**
     *
     * @type {string}
     * @memberof AlertRefDto
     */
    betterModelColor: string;
    /**
     *
     * @type {Array<number>}
     * @memberof AlertRefDto
     */
    betterModelActivity: Array<number>;
    /**
     *
     * @type {Array<number>}
     * @memberof AlertRefDto
     */
    betterModelTopTolerance: Array<number>;
    /**
     *
     * @type {Array<number>}
     * @memberof AlertRefDto
     */
    betterModelBottomTolerance: Array<number>;
    /**
     *
     * @type {string}
     * @memberof AlertRefDto
     */
    closestModelName: string;
    /**
     *
     * @type {number}
     * @memberof AlertRefDto
     */
    closestModelValue: number;
    /**
     *
     * @type {string}
     * @memberof AlertRefDto
     */
    closestModelColor: string;
    /**
     *
     * @type {Array<number>}
     * @memberof AlertRefDto
     */
    closestModelActivity: Array<number>;
    /**
     *
     * @type {Array<number>}
     * @memberof AlertRefDto
     */
    closestModelTopTolerance: Array<number>;
    /**
     *
     * @type {Array<number>}
     * @memberof AlertRefDto
     */
    closestModelBottomTolerance: Array<number>;
    /**
     *
     * @type {string}
     * @memberof AlertRefDto
     */
    dayModelName: string;
    /**
     *
     * @type {number}
     * @memberof AlertRefDto
     */
    dayModelValue: number;
    /**
     *
     * @type {string}
     * @memberof AlertRefDto
     */
    dayModelColor: string;
    /**
     *
     * @type {Array<number>}
     * @memberof AlertRefDto
     */
    dayModelActivity: Array<number>;
    /**
     *
     * @type {Array<number>}
     * @memberof AlertRefDto
     */
    dayModelTopTolerance: Array<number>;
    /**
     *
     * @type {Array<number>}
     * @memberof AlertRefDto
     */
    dayModelBottomTolerance: Array<number>;
    /**
     *
     * @type {string}
     * @memberof AlertRefDto
     */
    dayPrevisionModelName: string;
    /**
     *
     * @type {number}
     * @memberof AlertRefDto
     */
    dayPrevisionModelValue: number;
    /**
     *
     * @type {string}
     * @memberof AlertRefDto
     */
    dayPrevisionModelColor: string;
    /**
     *
     * @type {Array<number>}
     * @memberof AlertRefDto
     */
    dayPrevisionModelActivity: Array<number>;
    /**
     *
     * @type {Array<number>}
     * @memberof AlertRefDto
     */
    dayPrevisionModelTopTolerance: Array<number>;
    /**
     *
     * @type {Array<number>}
     * @memberof AlertRefDto
     */
    dayPrevisionModelBottomTolerance: Array<number>;
}
/**
 * @export
 * @namespace AlertRefDto
 */
export declare namespace AlertRefDto {
    /**
     * @export
     * @enum {string}
     */
    enum ActivityEnum {
        Over,
        Under
    }
}
/**
 *
 * @export
 * @interface AlertRefListDto
 */
export interface AlertRefListDto {
    /**
     * List of alerts refs
     * @type {Array<AlertRefDto>}
     * @memberof AlertRefListDto
     */
    alertRefs: Array<AlertRefDto>;
}
/**
 *
 * @export
 * @interface AlertRefResultDto
 */
export interface AlertRefResultDto {
    /**
     * List of alert ref
     * @type {Array<AlertRefDto>}
     * @memberof AlertRefResultDto
     */
    alerts: Array<AlertRefDto>;
    /**
     * List of sources
     * @type {Array<SourceDto>}
     * @memberof AlertRefResultDto
     */
    sources: Array<SourceDto>;
}
/**
 *
 * @export
 * @interface AnomaliesResponseDto
 */
export interface AnomaliesResponseDto {
    /**
     * Dates with anomalies
     * @type {Array<string>}
     * @memberof AnomaliesResponseDto
     */
    dates: Array<string>;
}
/**
 *
 * @export
 * @interface CreateSourceDayDto
 */
export interface CreateSourceDayDto {
    /**
     * The date with a format YYYY-MM-DD
     * @type {string}
     * @memberof CreateSourceDayDto
     */
    date: string;
    /**
     * An array of 144 values. Each value represents a time window of 10 minutes
     * @type {Array<number>}
     * @memberof CreateSourceDayDto
     */
    activity: Array<number>;
}
/**
 *
 * @export
 * @interface CreateSourceDto
 */
export interface CreateSourceDto {
    /**
     * The source name, between 2 and 100 characters
     * @type {string}
     * @memberof CreateSourceDto
     */
    name: string;
    /**
     * The source reference year, used to train our models
     * @type {number}
     * @memberof CreateSourceDto
     */
    referenceYear: number;
    /**
     * The source latitude
     * @type {number}
     * @memberof CreateSourceDto
     */
    latitude: number;
    /**
     * The source longitude
     * @type {number}
     * @memberof CreateSourceDto
     */
    longitude: number;
    /**
     * The source physical address
     * @type {string}
     * @memberof CreateSourceDto
     */
    address: string;
    /**
     * List of day data
     * @type {Array<CreateSourceDayDto>}
     * @memberof CreateSourceDto
     */
    days: Array<CreateSourceDayDto>;
}
/**
 *
 * @export
 * @interface DayContext
 */
export interface DayContext {
    /**
     *
     * @type {number}
     * @memberof DayContext
     */
    id: number;
    /**
     *
     * @type {string}
     * @memberof DayContext
     */
    createdDate: string;
    /**
     *
     * @type {string}
     * @memberof DayContext
     */
    updatedDate: string;
    /**
     * The context date in format \"yyyy-mm-dd\"
     * @type {string}
     * @memberof DayContext
     */
    dayDate: string;
    /**
     *
     * @type {number}
     * @memberof DayContext
     */
    sourceId: number;
    /**
     * Context type
     * @type {string}
     * @memberof DayContext
     */
    ctxType: DayContext.CtxTypeEnum;
    /**
     *
     * @type {any}
     * @memberof DayContext
     */
    activity: any;
    /**
     *
     * @type {any}
     * @memberof DayContext
     */
    value: any;
}
/**
 * @export
 * @namespace DayContext
 */
export declare namespace DayContext {
    /**
     * @export
     * @enum {string}
     */
    enum CtxTypeEnum {
        Dju,
        TempMaxDeg,
        TempMinDeg,
        WindSpeedKmh,
        WindTempDeg,
        RainMm,
        HumidityPerc,
        VisibilityKm,
        CloudCoverPerc,
        HeatIdxUnit,
        DewPointDeg,
        PressureHpa,
        SunriseSec,
        SunsetSec,
        DayLengthSec,
        HistoriqueMeteoEnum
    }
}
/**
 *
 * @export
 * @interface DayListDto
 */
export interface DayListDto {
    /**
     * List of days with a matching model
     * @type {Array<DayModelDto>}
     * @memberof DayListDto
     */
    days: Array<DayModelDto>;
}
/**
 *
 * @export
 * @interface DayModelDto
 */
export interface DayModelDto {
    /**
     *
     * @type {string}
     * @memberof DayModelDto
     */
    date: string;
    /**
     *
     * @type {number}
     * @memberof DayModelDto
     */
    value: number;
    /**
     *
     * @type {number}
     * @memberof DayModelDto
     */
    inertia: number;
    /**
     *
     * @type {number}
     * @memberof DayModelDto
     */
    model_id: number;
    /**
     *
     * @type {boolean}
     * @memberof DayModelDto
     */
    anomaly: boolean;
    /**
     *
     * @type {number}
     * @memberof DayModelDto
     */
    x: number;
    /**
     *
     * @type {number}
     * @memberof DayModelDto
     */
    y: number;
    /**
     *
     * @type {Array<number>}
     * @memberof DayModelDto
     */
    activity: Array<number>;
}
/**
 *
 * @export
 * @interface DayPatchDto
 */
export interface DayPatchDto {
    /**
     * The date with a format YYYY-MM-DD
     * @type {string}
     * @memberof DayPatchDto
     */
    date: string;
    /**
     * True if the day is an anomaly and should be ignored by the ML engine
     * @type {boolean}
     * @memberof DayPatchDto
     */
    anomaly: boolean;
}
/**
 *
 * @export
 * @interface DayTrend
 */
export interface DayTrend {
    /**
     *
     * @type {number}
     * @memberof DayTrend
     */
    id: number;
    /**
     *
     * @type {string}
     * @memberof DayTrend
     */
    createdDate: string;
    /**
     *
     * @type {string}
     * @memberof DayTrend
     */
    updatedDate: string;
    /**
     *
     * @type {number}
     * @memberof DayTrend
     */
    sourceId: number;
    /**
     *
     * @type {string}
     * @memberof DayTrend
     */
    startDayDate: string;
    /**
     *
     * @type {string}
     * @memberof DayTrend
     */
    stopDayDate: string;
    /**
     *
     * @type {string}
     * @memberof DayTrend
     */
    unit: DayTrend.UnitEnum;
    /**
     *
     * @type {string}
     * @memberof DayTrend
     */
    type: DayTrend.TypeEnum;
    /**
     *
     * @type {number}
     * @memberof DayTrend
     */
    value: number;
}
/**
 * @export
 * @namespace DayTrend
 */
export declare namespace DayTrend {
    /**
     * @export
     * @enum {string}
     */
    enum UnitEnum {
        Percent,
        Unit
    }
    /**
     * @export
     * @enum {string}
     */
    enum TypeEnum {
        OneShot,
        Weekly,
        Monthly
    }
}
/**
 *
 * @export
 * @interface DayTrendInput
 */
export interface DayTrendInput {
    /**
     *
     * @type {string}
     * @memberof DayTrendInput
     */
    startDayDate: string;
    /**
     *
     * @type {string}
     * @memberof DayTrendInput
     */
    stopDayDate: string;
    /**
     *
     * @type {string}
     * @memberof DayTrendInput
     */
    unit: DayTrendInput.UnitEnum;
    /**
     *
     * @type {string}
     * @memberof DayTrendInput
     */
    type: DayTrendInput.TypeEnum;
    /**
     *
     * @type {number}
     * @memberof DayTrendInput
     */
    value: number;
}
/**
 * @export
 * @namespace DayTrendInput
 */
export declare namespace DayTrendInput {
    /**
     * @export
     * @enum {string}
     */
    enum UnitEnum {
        Percent,
        Unit
    }
    /**
     * @export
     * @enum {string}
     */
    enum TypeEnum {
        OneShot,
        Weekly,
        Monthly
    }
}
/**
 *
 * @export
 * @interface DayTrendInputListDto
 */
export interface DayTrendInputListDto {
    /**
     * List of day trends
     * @type {Array<DayTrendInput>}
     * @memberof DayTrendInputListDto
     */
    dayTrends: Array<DayTrendInput>;
}
/**
 *
 * @export
 * @interface DayTrendListDto
 */
export interface DayTrendListDto {
    /**
     * List of day trends
     * @type {Array<DayTrend>}
     * @memberof DayTrendListDto
     */
    dayTrends: Array<DayTrend>;
}
/**
 *
 * @export
 * @interface DaysNearDateResultDto
 */
export interface DaysNearDateResultDto {
    /**
     * List of models
     * @type {Array<ModelDto>}
     * @memberof DaysNearDateResultDto
     */
    models: Array<ModelDto>;
    /**
     * List of days around the target date
     * @type {Array<DayModelDto>}
     * @memberof DaysNearDateResultDto
     */
    days: Array<DayModelDto>;
    /**
     * List of days near the target date in distance
     * @type {Array<DayModelDto>}
     * @memberof DaysNearDateResultDto
     */
    nearestDistanceDays: Array<DayModelDto>;
    /**
     *
     * @type {DayModelDto}
     * @memberof DaysNearDateResultDto
     */
    day: DayModelDto;
    /**
     *
     * @type {SourceDto}
     * @memberof DaysNearDateResultDto
     */
    source: SourceDto;
    /**
     * List of previsions
     * @type {Array<PrevisionDto>}
     * @memberof DaysNearDateResultDto
     */
    previsions: Array<PrevisionDto>;
    /**
     * List of alerts
     * @type {Array<AlertDto>}
     * @memberof DaysNearDateResultDto
     */
    alerts: Array<AlertDto>;
    /**
     * List of alerts refs
     * @type {Array<AlertRefDto>}
     * @memberof DaysNearDateResultDto
     */
    alertRefs: Array<AlertRefDto>;
}
/**
 *
 * @export
 * @interface DaysPatchDto
 */
export interface DaysPatchDto {
    /**
     * The source id to update days on
     * @type {number}
     * @memberof DaysPatchDto
     */
    sourceId: number;
    /**
     * The list of days to update
     * @type {Array<DayPatchDto>}
     * @memberof DaysPatchDto
     */
    days: Array<DayPatchDto>;
}
/**
 *
 * @export
 * @interface GeneratedDayContextBulkDto
 */
export interface GeneratedDayContextBulkDto {
    /**
     *
     * @type {Array<DayContext>}
     * @memberof GeneratedDayContextBulkDto
     */
    bulk: Array<DayContext>;
}
/**
 *
 * @export
 * @interface GeneratedDayTrendBulkDto
 */
export interface GeneratedDayTrendBulkDto {
    /**
     *
     * @type {Array<DayTrend>}
     * @memberof GeneratedDayTrendBulkDto
     */
    bulk: Array<DayTrend>;
}
/**
 *
 * @export
 * @interface ImportDayDto
 */
export interface ImportDayDto {
    /**
     * The date with a format YYYY-MM-DD
     * @type {string}
     * @memberof ImportDayDto
     */
    date: string;
    /**
     * An array of 144 values. Each value represents a time window of 10 minutes
     * @type {Array<number>}
     * @memberof ImportDayDto
     */
    activity: Array<number>;
}
/**
 *
 * @export
 * @interface ImportDaysDto
 */
export interface ImportDaysDto {
    /**
     * The source id to add data to
     * @type {number}
     * @memberof ImportDaysDto
     */
    sourceId: number;
    /**
     * The list of days to add
     * @type {Array<ImportDayDto>}
     * @memberof ImportDaysDto
     */
    days: Array<ImportDayDto>;
}
/**
 *
 * @export
 * @interface LoginDto
 */
export interface LoginDto {
    /**
     * The user name
     * @type {string}
     * @memberof LoginDto
     */
    username: string;
    /**
     * Our super secret password
     * @type {string}
     * @memberof LoginDto
     */
    password: string;
}
/**
 *
 * @export
 * @interface LoginResponseDto
 */
export interface LoginResponseDto {
    /**
     * Our super secret json web token
     * @type {string}
     * @memberof LoginResponseDto
     */
    jwt: string;
}
/**
 *
 * @export
 * @interface ModelDto
 */
export interface ModelDto {
    /**
     *
     * @type {number}
     * @memberof ModelDto
     */
    id: number;
    /**
     *
     * @type {string}
     * @memberof ModelDto
     */
    color: string;
    /**
     *
     * @type {string}
     * @memberof ModelDto
     */
    name: string;
    /**
     *
     * @type {Array<number>}
     * @memberof ModelDto
     */
    activity: Array<number>;
    /**
     *
     * @type {Array<number>}
     * @memberof ModelDto
     */
    top_tolerance: Array<number>;
    /**
     *
     * @type {Array<number>}
     * @memberof ModelDto
     */
    bottom_tolerance: Array<number>;
    /**
     *
     * @type {number}
     * @memberof ModelDto
     */
    x: number;
    /**
     *
     * @type {number}
     * @memberof ModelDto
     */
    y: number;
    /**
     *
     * @type {number}
     * @memberof ModelDto
     */
    value: number;
    /**
     *
     * @type {boolean}
     * @memberof ModelDto
     */
    anomaly: boolean;
}
/**
 *
 * @export
 * @interface ModelListDto
 */
export interface ModelListDto {
    /**
     * List of models
     * @type {Array<ModelDto>}
     * @memberof ModelListDto
     */
    models: Array<ModelDto>;
}
/**
 *
 * @export
 * @interface ModelPatchDto
 */
export interface ModelPatchDto {
    /**
     * The model id
     * @type {number}
     * @memberof ModelPatchDto
     */
    id: number;
    /**
     * The color in hex format. Ex: '#FFFFFF'
     * @type {string}
     * @memberof ModelPatchDto
     */
    color: string;
    /**
     * The model name, between 1 and 100 characters
     * @type {string}
     * @memberof ModelPatchDto
     */
    name: string;
    /**
     * True if the model is an anomaly and should be ignored by the ML engine
     * @type {boolean}
     * @memberof ModelPatchDto
     */
    anomaly: boolean;
}
/**
 *
 * @export
 * @interface ModelsPatchDto
 */
export interface ModelsPatchDto {
    /**
     * The list of models to be updated
     * @type {Array<ModelPatchDto>}
     * @memberof ModelsPatchDto
     */
    models: Array<ModelPatchDto>;
}
/**
 *
 * @export
 * @interface PrevisionApplyGroupDto
 */
export interface PrevisionApplyGroupDto {
    /**
     * The source id apply prevision from
     * @type {number}
     * @memberof PrevisionApplyGroupDto
     */
    sourceId: number;
}
/**
 *
 * @export
 * @interface PrevisionApplyGroupResponseDto
 */
export interface PrevisionApplyGroupResponseDto {
}
/**
 *
 * @export
 * @interface PrevisionBulkSaveDto
 */
export interface PrevisionBulkSaveDto {
    /**
     * The year to update the prevision, must be in the future
     * @type {number}
     * @memberof PrevisionBulkSaveDto
     */
    year: number;
    /**
     * The source id to update previsions on
     * @type {number}
     * @memberof PrevisionBulkSaveDto
     */
    sourceId: number;
    /**
     * List of previsions to update
     * @type {Array<PrevisionSaveDto>}
     * @memberof PrevisionBulkSaveDto
     */
    previsions: Array<PrevisionSaveDto>;
}
/**
 *
 * @export
 * @interface PrevisionBulkSaveResultDto
 */
export interface PrevisionBulkSaveResultDto {
    /**
     * The updated prevision objects
     * @type {Array<PrevisionDto>}
     * @memberof PrevisionBulkSaveResultDto
     */
    previsions: Array<PrevisionDto>;
    /**
     * List of newly created alerts
     * @type {Array<AlertDto>}
     * @memberof PrevisionBulkSaveResultDto
     */
    alerts: Array<AlertDto>;
}
/**
 *
 * @export
 * @interface PrevisionDto
 */
export interface PrevisionDto {
    /**
     *
     * @type {string}
     * @memberof PrevisionDto
     */
    date: string;
    /**
     *
     * @type {number}
     * @memberof PrevisionDto
     */
    model_id: number;
}
/**
 *
 * @export
 * @interface PrevisionListDto
 */
export interface PrevisionListDto {
    /**
     * List of previsions
     * @type {Array<PrevisionDto>}
     * @memberof PrevisionListDto
     */
    previsions: Array<PrevisionDto>;
    /**
     * If true, those previsions are user saved previsions and can be updated.If false, you can not update previsions, you have to save them first
     * @type {boolean}
     * @memberof PrevisionListDto
     */
    hasSavedPrevisions: boolean;
}
/**
 *
 * @export
 * @interface PrevisionPatchDto
 */
export interface PrevisionPatchDto {
    /**
     * The source id of the prevision to update
     * @type {number}
     * @memberof PrevisionPatchDto
     */
    sourceId: number;
    /**
     * The prevision date with a format YYYY-MM-DD
     * @type {string}
     * @memberof PrevisionPatchDto
     */
    date: string;
    /**
     * New model id to set on the prevision
     * @type {number}
     * @memberof PrevisionPatchDto
     */
    modelId: number;
}
/**
 *
 * @export
 * @interface PrevisionSaveDto
 */
export interface PrevisionSaveDto {
    /**
     * The date with a format YYYY-MM-DD, part of the prevision PK
     * @type {string}
     * @memberof PrevisionSaveDto
     */
    date: string;
    /**
     * Model id of the prevision, part of the prevision PK
     * @type {number}
     * @memberof PrevisionSaveDto
     */
    modelId: number;
}
/**
 *
 * @export
 * @interface PrevisionUpdateResultDto
 */
export interface PrevisionUpdateResultDto {
    /**
     *
     * @type {PrevisionDto}
     * @memberof PrevisionUpdateResultDto
     */
    prevision: PrevisionDto;
    /**
     * List of newly created alerts
     * @type {Array<AlertDto>}
     * @memberof PrevisionUpdateResultDto
     */
    alerts: Array<AlertDto>;
}
/**
 *
 * @export
 * @interface RecomputeDayModelsResponseDto
 */
export interface RecomputeDayModelsResponseDto {
    /**
     * The updated day models
     * @type {Array<DayModelDto>}
     * @memberof RecomputeDayModelsResponseDto
     */
    days: Array<DayModelDto>;
}
/**
 *
 * @export
 * @interface RecomputeDaysProjectionResponseDto
 */
export interface RecomputeDaysProjectionResponseDto {
    /**
     * The updated day models
     * @type {Array<DayModelDto>}
     * @memberof RecomputeDaysProjectionResponseDto
     */
    days: Array<DayModelDto>;
}
/**
 *
 * @export
 * @interface RecomputeModelsResponseDto
 */
export interface RecomputeModelsResponseDto {
    /**
     * Our newly created models
     * @type {Array<ModelDto>}
     * @memberof RecomputeModelsResponseDto
     */
    models: Array<ModelDto>;
    /**
     * List of days with a matching model
     * @type {Array<DayModelDto>}
     * @memberof RecomputeModelsResponseDto
     */
    days: Array<DayModelDto>;
}
/**
 *
 * @export
 * @interface RecomputeSourceModelsResponseDto
 */
export interface RecomputeSourceModelsResponseDto {
    /**
     * The updated sources
     * @type {Array<SourceDto>}
     * @memberof RecomputeSourceModelsResponseDto
     */
    sources: Array<SourceDto>;
    /**
     * The new source groups
     * @type {Array<SourceGroupDto>}
     * @memberof RecomputeSourceModelsResponseDto
     */
    groups: Array<SourceGroupDto>;
}
/**
 *
 * @export
 * @interface RequestDemoDto
 */
export interface RequestDemoDto {
    /**
     * User email
     * @type {string}
     * @memberof RequestDemoDto
     */
    email: string;
    /**
     * User name
     * @type {string}
     * @memberof RequestDemoDto
     */
    name: string;
    /**
     * Company name
     * @type {string}
     * @memberof RequestDemoDto
     */
    company: string;
    /**
     * Company position
     * @type {string}
     * @memberof RequestDemoDto
     */
    position: string;
}
/**
 *
 * @export
 * @interface SourceDto
 */
export interface SourceDto {
    /**
     *
     * @type {number}
     * @memberof SourceDto
     */
    id: number;
    /**
     *
     * @type {string}
     * @memberof SourceDto
     */
    name: string;
    /**
     *
     * @type {number}
     * @memberof SourceDto
     */
    groupId: number;
    /**
     *
     * @type {number}
     * @memberof SourceDto
     */
    groupInertia: number;
    /**
     *
     * @type {number}
     * @memberof SourceDto
     */
    projectionX: number;
    /**
     *
     * @type {number}
     * @memberof SourceDto
     */
    projectionY: number;
    /**
     *
     * @type {number}
     * @memberof SourceDto
     */
    referenceYear: number;
    /**
     *
     * @type {boolean}
     * @memberof SourceDto
     */
    hasPrevision: boolean;
    /**
     *
     * @type {boolean}
     * @memberof SourceDto
     */
    previsionEnabled: boolean;
    /**
     *
     * @type {number}
     * @memberof SourceDto
     */
    latitude: number;
    /**
     *
     * @type {number}
     * @memberof SourceDto
     */
    longitude: number;
    /**
     *
     * @type {string}
     * @memberof SourceDto
     */
    address: string;
    /**
     *
     * @type {number}
     * @memberof SourceDto
     */
    alertMinCriticity: number;
    /**
     *
     * @type {number}
     * @memberof SourceDto
     */
    alertMaxCriticity: number;
}
/**
 *
 * @export
 * @interface SourceGroupCreateDto
 */
export interface SourceGroupCreateDto {
    /**
     * The new group name
     * @type {string}
     * @memberof SourceGroupCreateDto
     */
    name: string;
}
/**
 *
 * @export
 * @interface SourceGroupDto
 */
export interface SourceGroupDto {
    /**
     *
     * @type {number}
     * @memberof SourceGroupDto
     */
    id: number;
    /**
     *
     * @type {string}
     * @memberof SourceGroupDto
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof SourceGroupDto
     */
    color: string;
}
/**
 *
 * @export
 * @interface SourceGroupListDto
 */
export interface SourceGroupListDto {
    /**
     *
     * @type {Array<SourceGroupDto>}
     * @memberof SourceGroupListDto
     */
    groups: Array<SourceGroupDto>;
}
/**
 *
 * @export
 * @interface SourceGroupPatchDto
 */
export interface SourceGroupPatchDto {
    /**
     * The group name
     * @type {string}
     * @memberof SourceGroupPatchDto
     */
    name: string;
    /**
     * The group color
     * @type {string}
     * @memberof SourceGroupPatchDto
     */
    color: string;
}
/**
 *
 * @export
 * @interface SourceListDto
 */
export interface SourceListDto {
    /**
     *
     * @type {Array<SourceDto>}
     * @memberof SourceListDto
     */
    sources: Array<SourceDto>;
}
/**
 *
 * @export
 * @interface SourcePatchDto
 */
export interface SourcePatchDto {
    /**
     * The source name
     * @type {string}
     * @memberof SourcePatchDto
     */
    name: string;
    /**
     * The source ability to generate alerts from previsions
     * @type {boolean}
     * @memberof SourcePatchDto
     */
    previsionEnabled: boolean;
    /**
     * The source latitude
     * @type {number}
     * @memberof SourcePatchDto
     */
    latitude: number;
    /**
     * The source longitude
     * @type {number}
     * @memberof SourcePatchDto
     */
    longitude: number;
    /**
     * The source physical address
     * @type {string}
     * @memberof SourcePatchDto
     */
    address: string;
    /**
     * The source minimum criticity to trigger an alert
     * @type {number}
     * @memberof SourcePatchDto
     */
    alertMinCriticity: number;
    /**
     * The source maximum criticity to trigger an alert
     * @type {number}
     * @memberof SourcePatchDto
     */
    alertMaxCriticity: number;
}
/**
 *
 * @export
 * @interface SourcePatchGroupDto
 */
export interface SourcePatchGroupDto {
    /**
     * The new group id
     * @type {number}
     * @memberof SourcePatchGroupDto
     */
    groupId: number;
}
/**
 *
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     *
     * @type {number}
     * @memberof UserDto
     */
    id: number;
    /**
     *
     * @type {string}
     * @memberof UserDto
     */
    email: string;
    /**
     * User unique login
     * @type {string}
     * @memberof UserDto
     */
    username: string;
}
/**
 * AIApi - fetch parameter creator
 * @export
 */
export declare const AIApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Auto detect-anomalies
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1AiAnomaliesSourceIdGet(sourceId: number, options?: any): FetchArgs;
    /**
     * Erases and re-computes all day models for a source and year
     * @summary Recomputes all day modesl
     * @param {number} year
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1AiRecomputeDayModelsSourceIdYearPost(year: number, sourceId: number, options?: any): FetchArgs;
    /**
     * This computes the X/Y projection of all days in the source for the given year
     * @summary Computes all days projection for a source and save them
     * @param {number} year
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1AiRecomputeDaysProjectionSourceIdYearPost(year: number, sourceId: number, options?: any): FetchArgs;
    /**
     * This operations erases both non-handled alerts and user previsions
     * @summary Triggers a model recompute
     * @param {number} year
     * @param {number} sourceId
     * @param {number} [modelCount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1AiRecomputeModelsSourceIdYearPost(year: number, sourceId: number, modelCount?: number, options?: any): FetchArgs;
    /**
     * This operations erases the group configuration
     * @summary Triggers a model recompute for source groups
     * @param {number} modelCount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1AiRecomputeSourceModelsModelCountPost(modelCount: number, options?: any): FetchArgs;
};
/**
 * AIApi - functional programming interface
 * @export
 */
export declare const AIApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Auto detect-anomalies
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1AiAnomaliesSourceIdGet(sourceId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AnomaliesResponseDto>;
    /**
     * Erases and re-computes all day models for a source and year
     * @summary Recomputes all day modesl
     * @param {number} year
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1AiRecomputeDayModelsSourceIdYearPost(year: number, sourceId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RecomputeDayModelsResponseDto>;
    /**
     * This computes the X/Y projection of all days in the source for the given year
     * @summary Computes all days projection for a source and save them
     * @param {number} year
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1AiRecomputeDaysProjectionSourceIdYearPost(year: number, sourceId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RecomputeDaysProjectionResponseDto>;
    /**
     * This operations erases both non-handled alerts and user previsions
     * @summary Triggers a model recompute
     * @param {number} year
     * @param {number} sourceId
     * @param {number} [modelCount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1AiRecomputeModelsSourceIdYearPost(year: number, sourceId: number, modelCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RecomputeModelsResponseDto>;
    /**
     * This operations erases the group configuration
     * @summary Triggers a model recompute for source groups
     * @param {number} modelCount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1AiRecomputeSourceModelsModelCountPost(modelCount: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RecomputeSourceModelsResponseDto>;
};
/**
 * AIApi - factory interface
 * @export
 */
export declare const AIApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @summary Auto detect-anomalies
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1AiAnomaliesSourceIdGet(sourceId: number, options?: any): Promise<AnomaliesResponseDto>;
    /**
     * Erases and re-computes all day models for a source and year
     * @summary Recomputes all day modesl
     * @param {number} year
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1AiRecomputeDayModelsSourceIdYearPost(year: number, sourceId: number, options?: any): Promise<RecomputeDayModelsResponseDto>;
    /**
     * This computes the X/Y projection of all days in the source for the given year
     * @summary Computes all days projection for a source and save them
     * @param {number} year
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1AiRecomputeDaysProjectionSourceIdYearPost(year: number, sourceId: number, options?: any): Promise<RecomputeDaysProjectionResponseDto>;
    /**
     * This operations erases both non-handled alerts and user previsions
     * @summary Triggers a model recompute
     * @param {number} year
     * @param {number} sourceId
     * @param {number} [modelCount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1AiRecomputeModelsSourceIdYearPost(year: number, sourceId: number, modelCount?: number, options?: any): Promise<RecomputeModelsResponseDto>;
    /**
     * This operations erases the group configuration
     * @summary Triggers a model recompute for source groups
     * @param {number} modelCount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1AiRecomputeSourceModelsModelCountPost(modelCount: number, options?: any): Promise<RecomputeSourceModelsResponseDto>;
};
/**
 * AIApi - object-oriented interface
 * @export
 * @class AIApi
 * @extends {BaseAPI}
 */
export declare class AIApi extends BaseAPI {
    /**
     *
     * @summary Auto detect-anomalies
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AIApi
     */
    v1AiAnomaliesSourceIdGet(sourceId: number, options?: any): Promise<AnomaliesResponseDto>;
    /**
     * Erases and re-computes all day models for a source and year
     * @summary Recomputes all day modesl
     * @param {number} year
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AIApi
     */
    v1AiRecomputeDayModelsSourceIdYearPost(year: number, sourceId: number, options?: any): Promise<RecomputeDayModelsResponseDto>;
    /**
     * This computes the X/Y projection of all days in the source for the given year
     * @summary Computes all days projection for a source and save them
     * @param {number} year
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AIApi
     */
    v1AiRecomputeDaysProjectionSourceIdYearPost(year: number, sourceId: number, options?: any): Promise<RecomputeDaysProjectionResponseDto>;
    /**
     * This operations erases both non-handled alerts and user previsions
     * @summary Triggers a model recompute
     * @param {number} year
     * @param {number} sourceId
     * @param {number} [modelCount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AIApi
     */
    v1AiRecomputeModelsSourceIdYearPost(year: number, sourceId: number, modelCount?: number, options?: any): Promise<RecomputeModelsResponseDto>;
    /**
     * This operations erases the group configuration
     * @summary Triggers a model recompute for source groups
     * @param {number} modelCount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AIApi
     */
    v1AiRecomputeSourceModelsModelCountPost(modelCount: number, options?: any): Promise<RecomputeSourceModelsResponseDto>;
}
/**
 * AlertApi - fetch parameter creator
 * @export
 */
export declare const AlertApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     * A commented alert is closed and is moved to the alert referential
     * @summary Add a comment to an alert
     * @param {AlertCommentDto} AlertCommentDto
     * @param {number} alertId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1AlertAlertIdCommentPatch(AlertCommentDto: AlertCommentDto, alertId: number, options?: any): FetchArgs;
    /**
     *
     * @summary Set alert favorite for the current user
     * @param {AlertFavoriteDto} AlertFavoriteDto
     * @param {number} alertId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1AlertAlertIdFavoritePatch(AlertFavoriteDto: AlertFavoriteDto, alertId: number, options?: any): FetchArgs;
    /**
     *
     * @summary List alerts data of the selected year, all alerts if no year is provided
     * @param {number} [sourceId]
     * @param {number} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1AlertListGet(sourceId?: number, year?: number, options?: any): FetchArgs;
    /**
     *
     * @summary List alerts data of the selected year, all alerts if no year is provided
     * @param {number} [sourceId]
     * @param {number} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1AlertRefListGet(sourceId?: number, year?: number, options?: any): FetchArgs;
};
/**
 * AlertApi - functional programming interface
 * @export
 */
export declare const AlertApiFp: (configuration?: Configuration) => {
    /**
     * A commented alert is closed and is moved to the alert referential
     * @summary Add a comment to an alert
     * @param {AlertCommentDto} AlertCommentDto
     * @param {number} alertId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1AlertAlertIdCommentPatch(AlertCommentDto: AlertCommentDto, alertId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AlertRefDto>;
    /**
     *
     * @summary Set alert favorite for the current user
     * @param {AlertFavoriteDto} AlertFavoriteDto
     * @param {number} alertId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1AlertAlertIdFavoritePatch(AlertFavoriteDto: AlertFavoriteDto, alertId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AlertDto>;
    /**
     *
     * @summary List alerts data of the selected year, all alerts if no year is provided
     * @param {number} [sourceId]
     * @param {number} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1AlertListGet(sourceId?: number, year?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AlertListDto>;
    /**
     *
     * @summary List alerts data of the selected year, all alerts if no year is provided
     * @param {number} [sourceId]
     * @param {number} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1AlertRefListGet(sourceId?: number, year?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AlertRefListDto>;
};
/**
 * AlertApi - factory interface
 * @export
 */
export declare const AlertApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     * A commented alert is closed and is moved to the alert referential
     * @summary Add a comment to an alert
     * @param {AlertCommentDto} AlertCommentDto
     * @param {number} alertId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1AlertAlertIdCommentPatch(AlertCommentDto: AlertCommentDto, alertId: number, options?: any): Promise<AlertRefDto>;
    /**
     *
     * @summary Set alert favorite for the current user
     * @param {AlertFavoriteDto} AlertFavoriteDto
     * @param {number} alertId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1AlertAlertIdFavoritePatch(AlertFavoriteDto: AlertFavoriteDto, alertId: number, options?: any): Promise<AlertDto>;
    /**
     *
     * @summary List alerts data of the selected year, all alerts if no year is provided
     * @param {number} [sourceId]
     * @param {number} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1AlertListGet(sourceId?: number, year?: number, options?: any): Promise<AlertListDto>;
    /**
     *
     * @summary List alerts data of the selected year, all alerts if no year is provided
     * @param {number} [sourceId]
     * @param {number} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1AlertRefListGet(sourceId?: number, year?: number, options?: any): Promise<AlertRefListDto>;
};
/**
 * AlertApi - object-oriented interface
 * @export
 * @class AlertApi
 * @extends {BaseAPI}
 */
export declare class AlertApi extends BaseAPI {
    /**
     * A commented alert is closed and is moved to the alert referential
     * @summary Add a comment to an alert
     * @param {AlertCommentDto} AlertCommentDto
     * @param {number} alertId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertApi
     */
    v1AlertAlertIdCommentPatch(AlertCommentDto: AlertCommentDto, alertId: number, options?: any): Promise<AlertRefDto>;
    /**
     *
     * @summary Set alert favorite for the current user
     * @param {AlertFavoriteDto} AlertFavoriteDto
     * @param {number} alertId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertApi
     */
    v1AlertAlertIdFavoritePatch(AlertFavoriteDto: AlertFavoriteDto, alertId: number, options?: any): Promise<AlertDto>;
    /**
     *
     * @summary List alerts data of the selected year, all alerts if no year is provided
     * @param {number} [sourceId]
     * @param {number} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertApi
     */
    v1AlertListGet(sourceId?: number, year?: number, options?: any): Promise<AlertListDto>;
    /**
     *
     * @summary List alerts data of the selected year, all alerts if no year is provided
     * @param {number} [sourceId]
     * @param {number} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertApi
     */
    v1AlertRefListGet(sourceId?: number, year?: number, options?: any): Promise<AlertRefListDto>;
}
/**
 * DayApi - fetch parameter creator
 * @export
 */
export declare const DayApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Update day entities
     * @param {DaysPatchDto} DaysPatchDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayBulkPatch(DaysPatchDto: DaysPatchDto, options?: any): FetchArgs;
    /**
     *
     * @summary List day data of the reference year
     * @param {number} year
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayListSourceIdYearGet(year: number, sourceId: number, options?: any): FetchArgs;
};
/**
 * DayApi - functional programming interface
 * @export
 */
export declare const DayApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Update day entities
     * @param {DaysPatchDto} DaysPatchDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayBulkPatch(DaysPatchDto: DaysPatchDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DayListDto>;
    /**
     *
     * @summary List day data of the reference year
     * @param {number} year
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayListSourceIdYearGet(year: number, sourceId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DayListDto>;
};
/**
 * DayApi - factory interface
 * @export
 */
export declare const DayApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @summary Update day entities
     * @param {DaysPatchDto} DaysPatchDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayBulkPatch(DaysPatchDto: DaysPatchDto, options?: any): Promise<DayListDto>;
    /**
     *
     * @summary List day data of the reference year
     * @param {number} year
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayListSourceIdYearGet(year: number, sourceId: number, options?: any): Promise<DayListDto>;
};
/**
 * DayApi - object-oriented interface
 * @export
 * @class DayApi
 * @extends {BaseAPI}
 */
export declare class DayApi extends BaseAPI {
    /**
     *
     * @summary Update day entities
     * @param {DaysPatchDto} DaysPatchDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DayApi
     */
    v1DayBulkPatch(DaysPatchDto: DaysPatchDto, options?: any): Promise<DayListDto>;
    /**
     *
     * @summary List day data of the reference year
     * @param {number} year
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DayApi
     */
    v1DayListSourceIdYearGet(year: number, sourceId: number, options?: any): Promise<DayListDto>;
}
/**
 * DayContextApi - fetch parameter creator
 * @export
 */
export declare const DayContextApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create many DayContext
     * @param {GeneratedDayContextBulkDto} GeneratedDayContextBulkDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayContextBulkPost(GeneratedDayContextBulkDto: GeneratedDayContextBulkDto, options?: any): FetchArgs;
    /**
     *
     * @summary Retrieve many DayContext
     * @param {string} [fields] &lt;h4&gt;Selects fields that should be returned in the reponse body.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;field1,field2,...&lt;/strong&gt; &lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;email,name&lt;/strong&gt;
     * @param {string} [filter] &lt;h4&gt;Adds fields request condition (multiple conditions) to the request.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?filter&#x3D;field||condition||value&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt; &lt;ul&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;name||eq||batman&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;isVillain||eq||false&amp;filter&#x3D;city||eq||Arkham&lt;/strong&gt; (multiple filters are treated as a combination of AND type of conditions)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;shots||in||12,26&lt;/strong&gt; (some conditions accept multiple values separated by commas)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;power||isnull&lt;/strong&gt; (some conditions don&#39;t accept value)&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;Filter Conditions:&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;eq&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&#x3D;&lt;/code&gt;, equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;ne&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;!&#x3D;&lt;/code&gt;, not equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;gt&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;gt;&lt;/code&gt;, greater than)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;lt&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;lt;&lt;/code&gt;, lower that)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;gte&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;gt;&#x3D;&lt;/code&gt;, greater than or equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;lte&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;lt;&#x3D;&lt;/code&gt;, lower than or equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;starts&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;LIKE val%&lt;/code&gt;, starts with)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;ends&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;LIKE %val&lt;/code&gt;, ends with)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;cont&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;LIKE %val%&lt;/code&gt;, contains)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;excl&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;NOT LIKE %val%&lt;/code&gt;, not contains)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;in&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;IN&lt;/code&gt;, in range, &lt;strong&gt;&lt;em&gt;accepts multiple values&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;notin&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;NOT IN&lt;/code&gt;, not in range, &lt;strong&gt;&lt;em&gt;accepts multiple values&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;isnull&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;IS NULL&lt;/code&gt;, is NULL, &lt;strong&gt;&lt;em&gt;doesn&#39;t accept value&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;notnull&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;IS NOT NULL&lt;/code&gt;, not NULL, &lt;strong&gt;&lt;em&gt;doesn&#39;t accept value&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;between&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;BETWEEN&lt;/code&gt;, between, &lt;strong&gt;&lt;em&gt;accepts two values&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;/ul&gt;
     * @param {string} [or] &lt;h4&gt;Adds &lt;code&gt;OR&lt;/code&gt; conditions to the request.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?or&#x3D;field||condition||value&lt;/strong&gt;&lt;br/&gt;It uses the same conditions as the filter parameter&lt;br/&gt;&lt;i&gt;Rules and &lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;If there is only &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; present (without &lt;code&gt;filter&lt;/code&gt;) then it will be interpreted as simple filter:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?or&#x3D;name||eq||batman&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If there are &lt;strong&gt;multiple&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; present (without &lt;code&gt;filter&lt;/code&gt;) then it will be interpreted as a compination of &lt;code&gt;OR&lt;/code&gt; conditions, as follows:&lt;br&gt;&lt;code&gt;WHERE {or} OR {or} OR ...&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?or&#x3D;name||eq||batman&amp;or&#x3D;name||eq||joker&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If there are &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; and &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;filter&lt;/code&gt; then it will be interpreted as &lt;code&gt;OR&lt;/code&gt; condition, as follows:&lt;br&gt;&lt;code&gt;WHERE {filter} OR {or}&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;name||eq||batman&amp;or&#x3D;name||eq||joker&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If present &lt;strong&gt;both&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; in any amount (&lt;strong&gt;one&lt;/strong&gt; or &lt;strong&gt;miltiple&lt;/strong&gt; each) then both interpreted as a combitation of &lt;code&gt;AND&lt;/code&gt; conditions and compared with each other by &lt;code&gt;OR&lt;/code&gt; condition, as follows:&lt;br&gt;&lt;code&gt;WHERE ({filter} AND {filter} AND ...) OR ({or} AND {or} AND ...)&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;type||eq||hero&amp;filter&#x3D;status||eq||alive&amp;or&#x3D;type||eq||villain&amp;or&#x3D;status||eq||dead&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;
     * @param {string} [sort] &lt;h4&gt;Adds sort by field (by multiple fields) and order to query result.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?sort&#x3D;field,ASC|DESC&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?sort&#x3D;name,ASC&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?sort&#x3D;name,ASC&amp;sort&#x3D;id,DESC&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;
     * @param {string} [join] &lt;h4&gt;Receive joined relational objects in GET result (with all or selected fields).&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation||field1,field2,...&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1||field11,field12,...&amp;join&#x3D;relation1.nested||field21,field22,...&amp;join&#x3D;...&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&amp;join&#x3D;notifications||content&amp;join&#x3D;tasks&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1&amp;join&#x3D;relation1.nested&amp;join&#x3D;relation1.nested.deepnested&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;strong&gt;&lt;i&gt;Notice:&lt;/i&gt;&lt;/strong&gt; &lt;code&gt;id&lt;/code&gt; field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.
     * @param {number} [per_page] &lt;h4&gt;Receive &lt;code&gt;N&lt;/code&gt; amount of entities.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?per_page&#x3D;number&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?per_page&#x3D;10&lt;/strong&gt;
     * @param {number} [offset] &lt;h4&gt;Offset &lt;code&gt;N&lt;/code&gt; amount of entities.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?offset&#x3D;number&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?offset&#x3D;10&lt;/strong&gt;
     * @param {number} [page] &lt;h4&gt;Receive a portion of &lt;code&gt;limit&lt;/code&gt; entities (alternative to &lt;code&gt;offset&lt;/code&gt;). Will be applied if &lt;code&gt;limit&lt;/code&gt; is set up.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?page&#x3D;number&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?page&#x3D;2&lt;/strong&gt;
     * @param {number} [cache] &lt;h4&gt;Reset cache (if was enabled) and receive entities from the DB.&lt;/h4&gt;&lt;i&gt;Usage:&lt;/i&gt; &lt;strong&gt;?cache&#x3D;0&lt;/strong&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayContextGet(fields?: string, filter?: string, or?: string, sort?: string, join?: string, per_page?: number, offset?: number, page?: number, cache?: number, options?: any): FetchArgs;
    /**
     *
     * @summary Delete one DayContext
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayContextIdDelete(id: number, options?: any): FetchArgs;
    /**
     *
     * @summary Retrieve one DayContext
     * @param {number} id
     * @param {string} [fields] &lt;h4&gt;Selects fields that should be returned in the reponse body.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;field1,field2,...&lt;/strong&gt; &lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;email,name&lt;/strong&gt;
     * @param {string} [join] &lt;h4&gt;Receive joined relational objects in GET result (with all or selected fields).&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation||field1,field2,...&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1||field11,field12,...&amp;join&#x3D;relation1.nested||field21,field22,...&amp;join&#x3D;...&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&amp;join&#x3D;notifications||content&amp;join&#x3D;tasks&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1&amp;join&#x3D;relation1.nested&amp;join&#x3D;relation1.nested.deepnested&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;strong&gt;&lt;i&gt;Notice:&lt;/i&gt;&lt;/strong&gt; &lt;code&gt;id&lt;/code&gt; field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.
     * @param {number} [cache] &lt;h4&gt;Reset cache (if was enabled) and receive entities from the DB.&lt;/h4&gt;&lt;i&gt;Usage:&lt;/i&gt; &lt;strong&gt;?cache&#x3D;0&lt;/strong&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayContextIdGet(id: number, fields?: string, join?: string, cache?: number, options?: any): FetchArgs;
    /**
     *
     * @summary Update one DayContext
     * @param {DayContext} DayContext
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayContextIdPatch(DayContext: DayContext, id: number, options?: any): FetchArgs;
    /**
     *
     * @summary Replace one DayContext
     * @param {DayContext} DayContext
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayContextIdPut(DayContext: DayContext, id: number, options?: any): FetchArgs;
    /**
     *
     * @summary Imports a meteo csv file for the source id
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayContextImportMeteoCsvSourceIdPost(sourceId: number, options?: any): FetchArgs;
    /**
     *
     * @summary Create one DayContext
     * @param {DayContext} DayContext
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayContextPost(DayContext: DayContext, options?: any): FetchArgs;
};
/**
 * DayContextApi - functional programming interface
 * @export
 */
export declare const DayContextApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create many DayContext
     * @param {GeneratedDayContextBulkDto} GeneratedDayContextBulkDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayContextBulkPost(GeneratedDayContextBulkDto: GeneratedDayContextBulkDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DayContext[]>;
    /**
     *
     * @summary Retrieve many DayContext
     * @param {string} [fields] &lt;h4&gt;Selects fields that should be returned in the reponse body.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;field1,field2,...&lt;/strong&gt; &lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;email,name&lt;/strong&gt;
     * @param {string} [filter] &lt;h4&gt;Adds fields request condition (multiple conditions) to the request.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?filter&#x3D;field||condition||value&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt; &lt;ul&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;name||eq||batman&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;isVillain||eq||false&amp;filter&#x3D;city||eq||Arkham&lt;/strong&gt; (multiple filters are treated as a combination of AND type of conditions)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;shots||in||12,26&lt;/strong&gt; (some conditions accept multiple values separated by commas)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;power||isnull&lt;/strong&gt; (some conditions don&#39;t accept value)&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;Filter Conditions:&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;eq&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&#x3D;&lt;/code&gt;, equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;ne&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;!&#x3D;&lt;/code&gt;, not equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;gt&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;gt;&lt;/code&gt;, greater than)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;lt&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;lt;&lt;/code&gt;, lower that)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;gte&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;gt;&#x3D;&lt;/code&gt;, greater than or equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;lte&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;lt;&#x3D;&lt;/code&gt;, lower than or equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;starts&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;LIKE val%&lt;/code&gt;, starts with)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;ends&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;LIKE %val&lt;/code&gt;, ends with)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;cont&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;LIKE %val%&lt;/code&gt;, contains)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;excl&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;NOT LIKE %val%&lt;/code&gt;, not contains)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;in&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;IN&lt;/code&gt;, in range, &lt;strong&gt;&lt;em&gt;accepts multiple values&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;notin&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;NOT IN&lt;/code&gt;, not in range, &lt;strong&gt;&lt;em&gt;accepts multiple values&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;isnull&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;IS NULL&lt;/code&gt;, is NULL, &lt;strong&gt;&lt;em&gt;doesn&#39;t accept value&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;notnull&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;IS NOT NULL&lt;/code&gt;, not NULL, &lt;strong&gt;&lt;em&gt;doesn&#39;t accept value&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;between&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;BETWEEN&lt;/code&gt;, between, &lt;strong&gt;&lt;em&gt;accepts two values&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;/ul&gt;
     * @param {string} [or] &lt;h4&gt;Adds &lt;code&gt;OR&lt;/code&gt; conditions to the request.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?or&#x3D;field||condition||value&lt;/strong&gt;&lt;br/&gt;It uses the same conditions as the filter parameter&lt;br/&gt;&lt;i&gt;Rules and &lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;If there is only &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; present (without &lt;code&gt;filter&lt;/code&gt;) then it will be interpreted as simple filter:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?or&#x3D;name||eq||batman&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If there are &lt;strong&gt;multiple&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; present (without &lt;code&gt;filter&lt;/code&gt;) then it will be interpreted as a compination of &lt;code&gt;OR&lt;/code&gt; conditions, as follows:&lt;br&gt;&lt;code&gt;WHERE {or} OR {or} OR ...&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?or&#x3D;name||eq||batman&amp;or&#x3D;name||eq||joker&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If there are &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; and &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;filter&lt;/code&gt; then it will be interpreted as &lt;code&gt;OR&lt;/code&gt; condition, as follows:&lt;br&gt;&lt;code&gt;WHERE {filter} OR {or}&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;name||eq||batman&amp;or&#x3D;name||eq||joker&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If present &lt;strong&gt;both&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; in any amount (&lt;strong&gt;one&lt;/strong&gt; or &lt;strong&gt;miltiple&lt;/strong&gt; each) then both interpreted as a combitation of &lt;code&gt;AND&lt;/code&gt; conditions and compared with each other by &lt;code&gt;OR&lt;/code&gt; condition, as follows:&lt;br&gt;&lt;code&gt;WHERE ({filter} AND {filter} AND ...) OR ({or} AND {or} AND ...)&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;type||eq||hero&amp;filter&#x3D;status||eq||alive&amp;or&#x3D;type||eq||villain&amp;or&#x3D;status||eq||dead&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;
     * @param {string} [sort] &lt;h4&gt;Adds sort by field (by multiple fields) and order to query result.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?sort&#x3D;field,ASC|DESC&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?sort&#x3D;name,ASC&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?sort&#x3D;name,ASC&amp;sort&#x3D;id,DESC&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;
     * @param {string} [join] &lt;h4&gt;Receive joined relational objects in GET result (with all or selected fields).&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation||field1,field2,...&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1||field11,field12,...&amp;join&#x3D;relation1.nested||field21,field22,...&amp;join&#x3D;...&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&amp;join&#x3D;notifications||content&amp;join&#x3D;tasks&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1&amp;join&#x3D;relation1.nested&amp;join&#x3D;relation1.nested.deepnested&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;strong&gt;&lt;i&gt;Notice:&lt;/i&gt;&lt;/strong&gt; &lt;code&gt;id&lt;/code&gt; field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.
     * @param {number} [per_page] &lt;h4&gt;Receive &lt;code&gt;N&lt;/code&gt; amount of entities.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?per_page&#x3D;number&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?per_page&#x3D;10&lt;/strong&gt;
     * @param {number} [offset] &lt;h4&gt;Offset &lt;code&gt;N&lt;/code&gt; amount of entities.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?offset&#x3D;number&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?offset&#x3D;10&lt;/strong&gt;
     * @param {number} [page] &lt;h4&gt;Receive a portion of &lt;code&gt;limit&lt;/code&gt; entities (alternative to &lt;code&gt;offset&lt;/code&gt;). Will be applied if &lt;code&gt;limit&lt;/code&gt; is set up.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?page&#x3D;number&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?page&#x3D;2&lt;/strong&gt;
     * @param {number} [cache] &lt;h4&gt;Reset cache (if was enabled) and receive entities from the DB.&lt;/h4&gt;&lt;i&gt;Usage:&lt;/i&gt; &lt;strong&gt;?cache&#x3D;0&lt;/strong&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayContextGet(fields?: string, filter?: string, or?: string, sort?: string, join?: string, per_page?: number, offset?: number, page?: number, cache?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DayContext[]>;
    /**
     *
     * @summary Delete one DayContext
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayContextIdDelete(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DayContext>;
    /**
     *
     * @summary Retrieve one DayContext
     * @param {number} id
     * @param {string} [fields] &lt;h4&gt;Selects fields that should be returned in the reponse body.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;field1,field2,...&lt;/strong&gt; &lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;email,name&lt;/strong&gt;
     * @param {string} [join] &lt;h4&gt;Receive joined relational objects in GET result (with all or selected fields).&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation||field1,field2,...&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1||field11,field12,...&amp;join&#x3D;relation1.nested||field21,field22,...&amp;join&#x3D;...&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&amp;join&#x3D;notifications||content&amp;join&#x3D;tasks&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1&amp;join&#x3D;relation1.nested&amp;join&#x3D;relation1.nested.deepnested&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;strong&gt;&lt;i&gt;Notice:&lt;/i&gt;&lt;/strong&gt; &lt;code&gt;id&lt;/code&gt; field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.
     * @param {number} [cache] &lt;h4&gt;Reset cache (if was enabled) and receive entities from the DB.&lt;/h4&gt;&lt;i&gt;Usage:&lt;/i&gt; &lt;strong&gt;?cache&#x3D;0&lt;/strong&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayContextIdGet(id: number, fields?: string, join?: string, cache?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DayContext>;
    /**
     *
     * @summary Update one DayContext
     * @param {DayContext} DayContext
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayContextIdPatch(DayContext: DayContext, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DayContext>;
    /**
     *
     * @summary Replace one DayContext
     * @param {DayContext} DayContext
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayContextIdPut(DayContext: DayContext, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DayContext>;
    /**
     *
     * @summary Imports a meteo csv file for the source id
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayContextImportMeteoCsvSourceIdPost(sourceId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Create one DayContext
     * @param {DayContext} DayContext
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayContextPost(DayContext: DayContext, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DayContext>;
};
/**
 * DayContextApi - factory interface
 * @export
 */
export declare const DayContextApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @summary Create many DayContext
     * @param {GeneratedDayContextBulkDto} GeneratedDayContextBulkDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayContextBulkPost(GeneratedDayContextBulkDto: GeneratedDayContextBulkDto, options?: any): Promise<DayContext[]>;
    /**
     *
     * @summary Retrieve many DayContext
     * @param {string} [fields] &lt;h4&gt;Selects fields that should be returned in the reponse body.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;field1,field2,...&lt;/strong&gt; &lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;email,name&lt;/strong&gt;
     * @param {string} [filter] &lt;h4&gt;Adds fields request condition (multiple conditions) to the request.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?filter&#x3D;field||condition||value&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt; &lt;ul&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;name||eq||batman&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;isVillain||eq||false&amp;filter&#x3D;city||eq||Arkham&lt;/strong&gt; (multiple filters are treated as a combination of AND type of conditions)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;shots||in||12,26&lt;/strong&gt; (some conditions accept multiple values separated by commas)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;power||isnull&lt;/strong&gt; (some conditions don&#39;t accept value)&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;Filter Conditions:&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;eq&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&#x3D;&lt;/code&gt;, equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;ne&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;!&#x3D;&lt;/code&gt;, not equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;gt&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;gt;&lt;/code&gt;, greater than)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;lt&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;lt;&lt;/code&gt;, lower that)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;gte&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;gt;&#x3D;&lt;/code&gt;, greater than or equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;lte&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;lt;&#x3D;&lt;/code&gt;, lower than or equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;starts&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;LIKE val%&lt;/code&gt;, starts with)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;ends&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;LIKE %val&lt;/code&gt;, ends with)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;cont&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;LIKE %val%&lt;/code&gt;, contains)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;excl&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;NOT LIKE %val%&lt;/code&gt;, not contains)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;in&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;IN&lt;/code&gt;, in range, &lt;strong&gt;&lt;em&gt;accepts multiple values&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;notin&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;NOT IN&lt;/code&gt;, not in range, &lt;strong&gt;&lt;em&gt;accepts multiple values&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;isnull&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;IS NULL&lt;/code&gt;, is NULL, &lt;strong&gt;&lt;em&gt;doesn&#39;t accept value&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;notnull&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;IS NOT NULL&lt;/code&gt;, not NULL, &lt;strong&gt;&lt;em&gt;doesn&#39;t accept value&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;between&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;BETWEEN&lt;/code&gt;, between, &lt;strong&gt;&lt;em&gt;accepts two values&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;/ul&gt;
     * @param {string} [or] &lt;h4&gt;Adds &lt;code&gt;OR&lt;/code&gt; conditions to the request.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?or&#x3D;field||condition||value&lt;/strong&gt;&lt;br/&gt;It uses the same conditions as the filter parameter&lt;br/&gt;&lt;i&gt;Rules and &lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;If there is only &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; present (without &lt;code&gt;filter&lt;/code&gt;) then it will be interpreted as simple filter:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?or&#x3D;name||eq||batman&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If there are &lt;strong&gt;multiple&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; present (without &lt;code&gt;filter&lt;/code&gt;) then it will be interpreted as a compination of &lt;code&gt;OR&lt;/code&gt; conditions, as follows:&lt;br&gt;&lt;code&gt;WHERE {or} OR {or} OR ...&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?or&#x3D;name||eq||batman&amp;or&#x3D;name||eq||joker&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If there are &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; and &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;filter&lt;/code&gt; then it will be interpreted as &lt;code&gt;OR&lt;/code&gt; condition, as follows:&lt;br&gt;&lt;code&gt;WHERE {filter} OR {or}&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;name||eq||batman&amp;or&#x3D;name||eq||joker&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If present &lt;strong&gt;both&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; in any amount (&lt;strong&gt;one&lt;/strong&gt; or &lt;strong&gt;miltiple&lt;/strong&gt; each) then both interpreted as a combitation of &lt;code&gt;AND&lt;/code&gt; conditions and compared with each other by &lt;code&gt;OR&lt;/code&gt; condition, as follows:&lt;br&gt;&lt;code&gt;WHERE ({filter} AND {filter} AND ...) OR ({or} AND {or} AND ...)&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;type||eq||hero&amp;filter&#x3D;status||eq||alive&amp;or&#x3D;type||eq||villain&amp;or&#x3D;status||eq||dead&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;
     * @param {string} [sort] &lt;h4&gt;Adds sort by field (by multiple fields) and order to query result.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?sort&#x3D;field,ASC|DESC&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?sort&#x3D;name,ASC&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?sort&#x3D;name,ASC&amp;sort&#x3D;id,DESC&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;
     * @param {string} [join] &lt;h4&gt;Receive joined relational objects in GET result (with all or selected fields).&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation||field1,field2,...&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1||field11,field12,...&amp;join&#x3D;relation1.nested||field21,field22,...&amp;join&#x3D;...&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&amp;join&#x3D;notifications||content&amp;join&#x3D;tasks&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1&amp;join&#x3D;relation1.nested&amp;join&#x3D;relation1.nested.deepnested&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;strong&gt;&lt;i&gt;Notice:&lt;/i&gt;&lt;/strong&gt; &lt;code&gt;id&lt;/code&gt; field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.
     * @param {number} [per_page] &lt;h4&gt;Receive &lt;code&gt;N&lt;/code&gt; amount of entities.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?per_page&#x3D;number&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?per_page&#x3D;10&lt;/strong&gt;
     * @param {number} [offset] &lt;h4&gt;Offset &lt;code&gt;N&lt;/code&gt; amount of entities.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?offset&#x3D;number&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?offset&#x3D;10&lt;/strong&gt;
     * @param {number} [page] &lt;h4&gt;Receive a portion of &lt;code&gt;limit&lt;/code&gt; entities (alternative to &lt;code&gt;offset&lt;/code&gt;). Will be applied if &lt;code&gt;limit&lt;/code&gt; is set up.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?page&#x3D;number&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?page&#x3D;2&lt;/strong&gt;
     * @param {number} [cache] &lt;h4&gt;Reset cache (if was enabled) and receive entities from the DB.&lt;/h4&gt;&lt;i&gt;Usage:&lt;/i&gt; &lt;strong&gt;?cache&#x3D;0&lt;/strong&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayContextGet(fields?: string, filter?: string, or?: string, sort?: string, join?: string, per_page?: number, offset?: number, page?: number, cache?: number, options?: any): Promise<DayContext[]>;
    /**
     *
     * @summary Delete one DayContext
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayContextIdDelete(id: number, options?: any): Promise<DayContext>;
    /**
     *
     * @summary Retrieve one DayContext
     * @param {number} id
     * @param {string} [fields] &lt;h4&gt;Selects fields that should be returned in the reponse body.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;field1,field2,...&lt;/strong&gt; &lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;email,name&lt;/strong&gt;
     * @param {string} [join] &lt;h4&gt;Receive joined relational objects in GET result (with all or selected fields).&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation||field1,field2,...&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1||field11,field12,...&amp;join&#x3D;relation1.nested||field21,field22,...&amp;join&#x3D;...&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&amp;join&#x3D;notifications||content&amp;join&#x3D;tasks&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1&amp;join&#x3D;relation1.nested&amp;join&#x3D;relation1.nested.deepnested&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;strong&gt;&lt;i&gt;Notice:&lt;/i&gt;&lt;/strong&gt; &lt;code&gt;id&lt;/code&gt; field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.
     * @param {number} [cache] &lt;h4&gt;Reset cache (if was enabled) and receive entities from the DB.&lt;/h4&gt;&lt;i&gt;Usage:&lt;/i&gt; &lt;strong&gt;?cache&#x3D;0&lt;/strong&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayContextIdGet(id: number, fields?: string, join?: string, cache?: number, options?: any): Promise<DayContext>;
    /**
     *
     * @summary Update one DayContext
     * @param {DayContext} DayContext
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayContextIdPatch(DayContext: DayContext, id: number, options?: any): Promise<DayContext>;
    /**
     *
     * @summary Replace one DayContext
     * @param {DayContext} DayContext
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayContextIdPut(DayContext: DayContext, id: number, options?: any): Promise<DayContext>;
    /**
     *
     * @summary Imports a meteo csv file for the source id
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayContextImportMeteoCsvSourceIdPost(sourceId: number, options?: any): Promise<Response>;
    /**
     *
     * @summary Create one DayContext
     * @param {DayContext} DayContext
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayContextPost(DayContext: DayContext, options?: any): Promise<DayContext>;
};
/**
 * DayContextApi - object-oriented interface
 * @export
 * @class DayContextApi
 * @extends {BaseAPI}
 */
export declare class DayContextApi extends BaseAPI {
    /**
     *
     * @summary Create many DayContext
     * @param {GeneratedDayContextBulkDto} GeneratedDayContextBulkDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DayContextApi
     */
    v1DayContextBulkPost(GeneratedDayContextBulkDto: GeneratedDayContextBulkDto, options?: any): Promise<DayContext[]>;
    /**
     *
     * @summary Retrieve many DayContext
     * @param {string} [fields] &lt;h4&gt;Selects fields that should be returned in the reponse body.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;field1,field2,...&lt;/strong&gt; &lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;email,name&lt;/strong&gt;
     * @param {string} [filter] &lt;h4&gt;Adds fields request condition (multiple conditions) to the request.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?filter&#x3D;field||condition||value&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt; &lt;ul&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;name||eq||batman&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;isVillain||eq||false&amp;filter&#x3D;city||eq||Arkham&lt;/strong&gt; (multiple filters are treated as a combination of AND type of conditions)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;shots||in||12,26&lt;/strong&gt; (some conditions accept multiple values separated by commas)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;power||isnull&lt;/strong&gt; (some conditions don&#39;t accept value)&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;Filter Conditions:&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;eq&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&#x3D;&lt;/code&gt;, equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;ne&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;!&#x3D;&lt;/code&gt;, not equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;gt&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;gt;&lt;/code&gt;, greater than)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;lt&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;lt;&lt;/code&gt;, lower that)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;gte&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;gt;&#x3D;&lt;/code&gt;, greater than or equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;lte&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;lt;&#x3D;&lt;/code&gt;, lower than or equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;starts&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;LIKE val%&lt;/code&gt;, starts with)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;ends&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;LIKE %val&lt;/code&gt;, ends with)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;cont&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;LIKE %val%&lt;/code&gt;, contains)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;excl&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;NOT LIKE %val%&lt;/code&gt;, not contains)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;in&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;IN&lt;/code&gt;, in range, &lt;strong&gt;&lt;em&gt;accepts multiple values&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;notin&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;NOT IN&lt;/code&gt;, not in range, &lt;strong&gt;&lt;em&gt;accepts multiple values&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;isnull&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;IS NULL&lt;/code&gt;, is NULL, &lt;strong&gt;&lt;em&gt;doesn&#39;t accept value&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;notnull&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;IS NOT NULL&lt;/code&gt;, not NULL, &lt;strong&gt;&lt;em&gt;doesn&#39;t accept value&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;between&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;BETWEEN&lt;/code&gt;, between, &lt;strong&gt;&lt;em&gt;accepts two values&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;/ul&gt;
     * @param {string} [or] &lt;h4&gt;Adds &lt;code&gt;OR&lt;/code&gt; conditions to the request.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?or&#x3D;field||condition||value&lt;/strong&gt;&lt;br/&gt;It uses the same conditions as the filter parameter&lt;br/&gt;&lt;i&gt;Rules and &lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;If there is only &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; present (without &lt;code&gt;filter&lt;/code&gt;) then it will be interpreted as simple filter:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?or&#x3D;name||eq||batman&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If there are &lt;strong&gt;multiple&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; present (without &lt;code&gt;filter&lt;/code&gt;) then it will be interpreted as a compination of &lt;code&gt;OR&lt;/code&gt; conditions, as follows:&lt;br&gt;&lt;code&gt;WHERE {or} OR {or} OR ...&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?or&#x3D;name||eq||batman&amp;or&#x3D;name||eq||joker&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If there are &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; and &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;filter&lt;/code&gt; then it will be interpreted as &lt;code&gt;OR&lt;/code&gt; condition, as follows:&lt;br&gt;&lt;code&gt;WHERE {filter} OR {or}&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;name||eq||batman&amp;or&#x3D;name||eq||joker&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If present &lt;strong&gt;both&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; in any amount (&lt;strong&gt;one&lt;/strong&gt; or &lt;strong&gt;miltiple&lt;/strong&gt; each) then both interpreted as a combitation of &lt;code&gt;AND&lt;/code&gt; conditions and compared with each other by &lt;code&gt;OR&lt;/code&gt; condition, as follows:&lt;br&gt;&lt;code&gt;WHERE ({filter} AND {filter} AND ...) OR ({or} AND {or} AND ...)&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;type||eq||hero&amp;filter&#x3D;status||eq||alive&amp;or&#x3D;type||eq||villain&amp;or&#x3D;status||eq||dead&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;
     * @param {string} [sort] &lt;h4&gt;Adds sort by field (by multiple fields) and order to query result.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?sort&#x3D;field,ASC|DESC&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?sort&#x3D;name,ASC&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?sort&#x3D;name,ASC&amp;sort&#x3D;id,DESC&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;
     * @param {string} [join] &lt;h4&gt;Receive joined relational objects in GET result (with all or selected fields).&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation||field1,field2,...&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1||field11,field12,...&amp;join&#x3D;relation1.nested||field21,field22,...&amp;join&#x3D;...&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&amp;join&#x3D;notifications||content&amp;join&#x3D;tasks&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1&amp;join&#x3D;relation1.nested&amp;join&#x3D;relation1.nested.deepnested&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;strong&gt;&lt;i&gt;Notice:&lt;/i&gt;&lt;/strong&gt; &lt;code&gt;id&lt;/code&gt; field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.
     * @param {number} [per_page] &lt;h4&gt;Receive &lt;code&gt;N&lt;/code&gt; amount of entities.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?per_page&#x3D;number&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?per_page&#x3D;10&lt;/strong&gt;
     * @param {number} [offset] &lt;h4&gt;Offset &lt;code&gt;N&lt;/code&gt; amount of entities.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?offset&#x3D;number&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?offset&#x3D;10&lt;/strong&gt;
     * @param {number} [page] &lt;h4&gt;Receive a portion of &lt;code&gt;limit&lt;/code&gt; entities (alternative to &lt;code&gt;offset&lt;/code&gt;). Will be applied if &lt;code&gt;limit&lt;/code&gt; is set up.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?page&#x3D;number&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?page&#x3D;2&lt;/strong&gt;
     * @param {number} [cache] &lt;h4&gt;Reset cache (if was enabled) and receive entities from the DB.&lt;/h4&gt;&lt;i&gt;Usage:&lt;/i&gt; &lt;strong&gt;?cache&#x3D;0&lt;/strong&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DayContextApi
     */
    v1DayContextGet(fields?: string, filter?: string, or?: string, sort?: string, join?: string, per_page?: number, offset?: number, page?: number, cache?: number, options?: any): Promise<DayContext[]>;
    /**
     *
     * @summary Delete one DayContext
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DayContextApi
     */
    v1DayContextIdDelete(id: number, options?: any): Promise<DayContext>;
    /**
     *
     * @summary Retrieve one DayContext
     * @param {number} id
     * @param {string} [fields] &lt;h4&gt;Selects fields that should be returned in the reponse body.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;field1,field2,...&lt;/strong&gt; &lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;email,name&lt;/strong&gt;
     * @param {string} [join] &lt;h4&gt;Receive joined relational objects in GET result (with all or selected fields).&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation||field1,field2,...&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1||field11,field12,...&amp;join&#x3D;relation1.nested||field21,field22,...&amp;join&#x3D;...&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&amp;join&#x3D;notifications||content&amp;join&#x3D;tasks&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1&amp;join&#x3D;relation1.nested&amp;join&#x3D;relation1.nested.deepnested&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;strong&gt;&lt;i&gt;Notice:&lt;/i&gt;&lt;/strong&gt; &lt;code&gt;id&lt;/code&gt; field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.
     * @param {number} [cache] &lt;h4&gt;Reset cache (if was enabled) and receive entities from the DB.&lt;/h4&gt;&lt;i&gt;Usage:&lt;/i&gt; &lt;strong&gt;?cache&#x3D;0&lt;/strong&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DayContextApi
     */
    v1DayContextIdGet(id: number, fields?: string, join?: string, cache?: number, options?: any): Promise<DayContext>;
    /**
     *
     * @summary Update one DayContext
     * @param {DayContext} DayContext
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DayContextApi
     */
    v1DayContextIdPatch(DayContext: DayContext, id: number, options?: any): Promise<DayContext>;
    /**
     *
     * @summary Replace one DayContext
     * @param {DayContext} DayContext
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DayContextApi
     */
    v1DayContextIdPut(DayContext: DayContext, id: number, options?: any): Promise<DayContext>;
    /**
     *
     * @summary Imports a meteo csv file for the source id
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DayContextApi
     */
    v1DayContextImportMeteoCsvSourceIdPost(sourceId: number, options?: any): Promise<Response>;
    /**
     *
     * @summary Create one DayContext
     * @param {DayContext} DayContext
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DayContextApi
     */
    v1DayContextPost(DayContext: DayContext, options?: any): Promise<DayContext>;
}
/**
 * DayTrendApi - fetch parameter creator
 * @export
 */
export declare const DayTrendApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create many DayTrend
     * @param {GeneratedDayTrendBulkDto} GeneratedDayTrendBulkDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayTrendBulkPost(GeneratedDayTrendBulkDto: GeneratedDayTrendBulkDto, options?: any): FetchArgs;
    /**
     *
     * @summary Retrieve many DayTrend
     * @param {string} [fields] &lt;h4&gt;Selects fields that should be returned in the reponse body.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;field1,field2,...&lt;/strong&gt; &lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;email,name&lt;/strong&gt;
     * @param {string} [filter] &lt;h4&gt;Adds fields request condition (multiple conditions) to the request.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?filter&#x3D;field||condition||value&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt; &lt;ul&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;name||eq||batman&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;isVillain||eq||false&amp;filter&#x3D;city||eq||Arkham&lt;/strong&gt; (multiple filters are treated as a combination of AND type of conditions)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;shots||in||12,26&lt;/strong&gt; (some conditions accept multiple values separated by commas)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;power||isnull&lt;/strong&gt; (some conditions don&#39;t accept value)&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;Filter Conditions:&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;eq&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&#x3D;&lt;/code&gt;, equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;ne&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;!&#x3D;&lt;/code&gt;, not equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;gt&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;gt;&lt;/code&gt;, greater than)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;lt&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;lt;&lt;/code&gt;, lower that)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;gte&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;gt;&#x3D;&lt;/code&gt;, greater than or equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;lte&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;lt;&#x3D;&lt;/code&gt;, lower than or equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;starts&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;LIKE val%&lt;/code&gt;, starts with)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;ends&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;LIKE %val&lt;/code&gt;, ends with)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;cont&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;LIKE %val%&lt;/code&gt;, contains)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;excl&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;NOT LIKE %val%&lt;/code&gt;, not contains)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;in&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;IN&lt;/code&gt;, in range, &lt;strong&gt;&lt;em&gt;accepts multiple values&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;notin&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;NOT IN&lt;/code&gt;, not in range, &lt;strong&gt;&lt;em&gt;accepts multiple values&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;isnull&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;IS NULL&lt;/code&gt;, is NULL, &lt;strong&gt;&lt;em&gt;doesn&#39;t accept value&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;notnull&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;IS NOT NULL&lt;/code&gt;, not NULL, &lt;strong&gt;&lt;em&gt;doesn&#39;t accept value&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;between&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;BETWEEN&lt;/code&gt;, between, &lt;strong&gt;&lt;em&gt;accepts two values&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;/ul&gt;
     * @param {string} [or] &lt;h4&gt;Adds &lt;code&gt;OR&lt;/code&gt; conditions to the request.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?or&#x3D;field||condition||value&lt;/strong&gt;&lt;br/&gt;It uses the same conditions as the filter parameter&lt;br/&gt;&lt;i&gt;Rules and &lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;If there is only &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; present (without &lt;code&gt;filter&lt;/code&gt;) then it will be interpreted as simple filter:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?or&#x3D;name||eq||batman&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If there are &lt;strong&gt;multiple&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; present (without &lt;code&gt;filter&lt;/code&gt;) then it will be interpreted as a compination of &lt;code&gt;OR&lt;/code&gt; conditions, as follows:&lt;br&gt;&lt;code&gt;WHERE {or} OR {or} OR ...&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?or&#x3D;name||eq||batman&amp;or&#x3D;name||eq||joker&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If there are &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; and &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;filter&lt;/code&gt; then it will be interpreted as &lt;code&gt;OR&lt;/code&gt; condition, as follows:&lt;br&gt;&lt;code&gt;WHERE {filter} OR {or}&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;name||eq||batman&amp;or&#x3D;name||eq||joker&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If present &lt;strong&gt;both&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; in any amount (&lt;strong&gt;one&lt;/strong&gt; or &lt;strong&gt;miltiple&lt;/strong&gt; each) then both interpreted as a combitation of &lt;code&gt;AND&lt;/code&gt; conditions and compared with each other by &lt;code&gt;OR&lt;/code&gt; condition, as follows:&lt;br&gt;&lt;code&gt;WHERE ({filter} AND {filter} AND ...) OR ({or} AND {or} AND ...)&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;type||eq||hero&amp;filter&#x3D;status||eq||alive&amp;or&#x3D;type||eq||villain&amp;or&#x3D;status||eq||dead&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;
     * @param {string} [sort] &lt;h4&gt;Adds sort by field (by multiple fields) and order to query result.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?sort&#x3D;field,ASC|DESC&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?sort&#x3D;name,ASC&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?sort&#x3D;name,ASC&amp;sort&#x3D;id,DESC&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;
     * @param {string} [join] &lt;h4&gt;Receive joined relational objects in GET result (with all or selected fields).&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation||field1,field2,...&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1||field11,field12,...&amp;join&#x3D;relation1.nested||field21,field22,...&amp;join&#x3D;...&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&amp;join&#x3D;notifications||content&amp;join&#x3D;tasks&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1&amp;join&#x3D;relation1.nested&amp;join&#x3D;relation1.nested.deepnested&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;strong&gt;&lt;i&gt;Notice:&lt;/i&gt;&lt;/strong&gt; &lt;code&gt;id&lt;/code&gt; field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.
     * @param {number} [per_page] &lt;h4&gt;Receive &lt;code&gt;N&lt;/code&gt; amount of entities.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?per_page&#x3D;number&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?per_page&#x3D;10&lt;/strong&gt;
     * @param {number} [offset] &lt;h4&gt;Offset &lt;code&gt;N&lt;/code&gt; amount of entities.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?offset&#x3D;number&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?offset&#x3D;10&lt;/strong&gt;
     * @param {number} [page] &lt;h4&gt;Receive a portion of &lt;code&gt;limit&lt;/code&gt; entities (alternative to &lt;code&gt;offset&lt;/code&gt;). Will be applied if &lt;code&gt;limit&lt;/code&gt; is set up.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?page&#x3D;number&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?page&#x3D;2&lt;/strong&gt;
     * @param {number} [cache] &lt;h4&gt;Reset cache (if was enabled) and receive entities from the DB.&lt;/h4&gt;&lt;i&gt;Usage:&lt;/i&gt; &lt;strong&gt;?cache&#x3D;0&lt;/strong&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayTrendGet(fields?: string, filter?: string, or?: string, sort?: string, join?: string, per_page?: number, offset?: number, page?: number, cache?: number, options?: any): FetchArgs;
    /**
     *
     * @summary Delete one DayTrend
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayTrendIdDelete(id: number, options?: any): FetchArgs;
    /**
     *
     * @summary Retrieve one DayTrend
     * @param {number} id
     * @param {string} [fields] &lt;h4&gt;Selects fields that should be returned in the reponse body.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;field1,field2,...&lt;/strong&gt; &lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;email,name&lt;/strong&gt;
     * @param {string} [join] &lt;h4&gt;Receive joined relational objects in GET result (with all or selected fields).&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation||field1,field2,...&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1||field11,field12,...&amp;join&#x3D;relation1.nested||field21,field22,...&amp;join&#x3D;...&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&amp;join&#x3D;notifications||content&amp;join&#x3D;tasks&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1&amp;join&#x3D;relation1.nested&amp;join&#x3D;relation1.nested.deepnested&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;strong&gt;&lt;i&gt;Notice:&lt;/i&gt;&lt;/strong&gt; &lt;code&gt;id&lt;/code&gt; field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.
     * @param {number} [cache] &lt;h4&gt;Reset cache (if was enabled) and receive entities from the DB.&lt;/h4&gt;&lt;i&gt;Usage:&lt;/i&gt; &lt;strong&gt;?cache&#x3D;0&lt;/strong&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayTrendIdGet(id: number, fields?: string, join?: string, cache?: number, options?: any): FetchArgs;
    /**
     *
     * @summary Update one DayTrend
     * @param {DayTrend} DayTrend
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayTrendIdPatch(DayTrend: DayTrend, id: number, options?: any): FetchArgs;
    /**
     *
     * @summary Replace one DayTrend
     * @param {DayTrend} DayTrend
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayTrendIdPut(DayTrend: DayTrend, id: number, options?: any): FetchArgs;
    /**
     *
     * @summary Create one DayTrend
     * @param {DayTrend} DayTrend
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayTrendPost(DayTrend: DayTrend, options?: any): FetchArgs;
    /**
     *
     * @summary Imports many trends and replace existing. Recomputes alerts
     * @param {number} sourceId
     * @param {DayTrendInputListDto} DayTrendInputListDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayTrendReplaceAllInSourceSourceIdPost(sourceId: number, DayTrendInputListDto: DayTrendInputListDto, options?: any): FetchArgs;
};
/**
 * DayTrendApi - functional programming interface
 * @export
 */
export declare const DayTrendApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create many DayTrend
     * @param {GeneratedDayTrendBulkDto} GeneratedDayTrendBulkDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayTrendBulkPost(GeneratedDayTrendBulkDto: GeneratedDayTrendBulkDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DayTrend[]>;
    /**
     *
     * @summary Retrieve many DayTrend
     * @param {string} [fields] &lt;h4&gt;Selects fields that should be returned in the reponse body.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;field1,field2,...&lt;/strong&gt; &lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;email,name&lt;/strong&gt;
     * @param {string} [filter] &lt;h4&gt;Adds fields request condition (multiple conditions) to the request.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?filter&#x3D;field||condition||value&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt; &lt;ul&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;name||eq||batman&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;isVillain||eq||false&amp;filter&#x3D;city||eq||Arkham&lt;/strong&gt; (multiple filters are treated as a combination of AND type of conditions)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;shots||in||12,26&lt;/strong&gt; (some conditions accept multiple values separated by commas)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;power||isnull&lt;/strong&gt; (some conditions don&#39;t accept value)&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;Filter Conditions:&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;eq&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&#x3D;&lt;/code&gt;, equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;ne&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;!&#x3D;&lt;/code&gt;, not equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;gt&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;gt;&lt;/code&gt;, greater than)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;lt&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;lt;&lt;/code&gt;, lower that)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;gte&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;gt;&#x3D;&lt;/code&gt;, greater than or equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;lte&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;lt;&#x3D;&lt;/code&gt;, lower than or equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;starts&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;LIKE val%&lt;/code&gt;, starts with)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;ends&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;LIKE %val&lt;/code&gt;, ends with)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;cont&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;LIKE %val%&lt;/code&gt;, contains)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;excl&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;NOT LIKE %val%&lt;/code&gt;, not contains)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;in&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;IN&lt;/code&gt;, in range, &lt;strong&gt;&lt;em&gt;accepts multiple values&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;notin&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;NOT IN&lt;/code&gt;, not in range, &lt;strong&gt;&lt;em&gt;accepts multiple values&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;isnull&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;IS NULL&lt;/code&gt;, is NULL, &lt;strong&gt;&lt;em&gt;doesn&#39;t accept value&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;notnull&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;IS NOT NULL&lt;/code&gt;, not NULL, &lt;strong&gt;&lt;em&gt;doesn&#39;t accept value&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;between&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;BETWEEN&lt;/code&gt;, between, &lt;strong&gt;&lt;em&gt;accepts two values&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;/ul&gt;
     * @param {string} [or] &lt;h4&gt;Adds &lt;code&gt;OR&lt;/code&gt; conditions to the request.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?or&#x3D;field||condition||value&lt;/strong&gt;&lt;br/&gt;It uses the same conditions as the filter parameter&lt;br/&gt;&lt;i&gt;Rules and &lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;If there is only &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; present (without &lt;code&gt;filter&lt;/code&gt;) then it will be interpreted as simple filter:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?or&#x3D;name||eq||batman&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If there are &lt;strong&gt;multiple&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; present (without &lt;code&gt;filter&lt;/code&gt;) then it will be interpreted as a compination of &lt;code&gt;OR&lt;/code&gt; conditions, as follows:&lt;br&gt;&lt;code&gt;WHERE {or} OR {or} OR ...&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?or&#x3D;name||eq||batman&amp;or&#x3D;name||eq||joker&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If there are &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; and &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;filter&lt;/code&gt; then it will be interpreted as &lt;code&gt;OR&lt;/code&gt; condition, as follows:&lt;br&gt;&lt;code&gt;WHERE {filter} OR {or}&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;name||eq||batman&amp;or&#x3D;name||eq||joker&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If present &lt;strong&gt;both&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; in any amount (&lt;strong&gt;one&lt;/strong&gt; or &lt;strong&gt;miltiple&lt;/strong&gt; each) then both interpreted as a combitation of &lt;code&gt;AND&lt;/code&gt; conditions and compared with each other by &lt;code&gt;OR&lt;/code&gt; condition, as follows:&lt;br&gt;&lt;code&gt;WHERE ({filter} AND {filter} AND ...) OR ({or} AND {or} AND ...)&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;type||eq||hero&amp;filter&#x3D;status||eq||alive&amp;or&#x3D;type||eq||villain&amp;or&#x3D;status||eq||dead&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;
     * @param {string} [sort] &lt;h4&gt;Adds sort by field (by multiple fields) and order to query result.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?sort&#x3D;field,ASC|DESC&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?sort&#x3D;name,ASC&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?sort&#x3D;name,ASC&amp;sort&#x3D;id,DESC&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;
     * @param {string} [join] &lt;h4&gt;Receive joined relational objects in GET result (with all or selected fields).&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation||field1,field2,...&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1||field11,field12,...&amp;join&#x3D;relation1.nested||field21,field22,...&amp;join&#x3D;...&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&amp;join&#x3D;notifications||content&amp;join&#x3D;tasks&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1&amp;join&#x3D;relation1.nested&amp;join&#x3D;relation1.nested.deepnested&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;strong&gt;&lt;i&gt;Notice:&lt;/i&gt;&lt;/strong&gt; &lt;code&gt;id&lt;/code&gt; field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.
     * @param {number} [per_page] &lt;h4&gt;Receive &lt;code&gt;N&lt;/code&gt; amount of entities.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?per_page&#x3D;number&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?per_page&#x3D;10&lt;/strong&gt;
     * @param {number} [offset] &lt;h4&gt;Offset &lt;code&gt;N&lt;/code&gt; amount of entities.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?offset&#x3D;number&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?offset&#x3D;10&lt;/strong&gt;
     * @param {number} [page] &lt;h4&gt;Receive a portion of &lt;code&gt;limit&lt;/code&gt; entities (alternative to &lt;code&gt;offset&lt;/code&gt;). Will be applied if &lt;code&gt;limit&lt;/code&gt; is set up.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?page&#x3D;number&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?page&#x3D;2&lt;/strong&gt;
     * @param {number} [cache] &lt;h4&gt;Reset cache (if was enabled) and receive entities from the DB.&lt;/h4&gt;&lt;i&gt;Usage:&lt;/i&gt; &lt;strong&gt;?cache&#x3D;0&lt;/strong&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayTrendGet(fields?: string, filter?: string, or?: string, sort?: string, join?: string, per_page?: number, offset?: number, page?: number, cache?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DayTrend[]>;
    /**
     *
     * @summary Delete one DayTrend
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayTrendIdDelete(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DayTrend>;
    /**
     *
     * @summary Retrieve one DayTrend
     * @param {number} id
     * @param {string} [fields] &lt;h4&gt;Selects fields that should be returned in the reponse body.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;field1,field2,...&lt;/strong&gt; &lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;email,name&lt;/strong&gt;
     * @param {string} [join] &lt;h4&gt;Receive joined relational objects in GET result (with all or selected fields).&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation||field1,field2,...&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1||field11,field12,...&amp;join&#x3D;relation1.nested||field21,field22,...&amp;join&#x3D;...&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&amp;join&#x3D;notifications||content&amp;join&#x3D;tasks&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1&amp;join&#x3D;relation1.nested&amp;join&#x3D;relation1.nested.deepnested&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;strong&gt;&lt;i&gt;Notice:&lt;/i&gt;&lt;/strong&gt; &lt;code&gt;id&lt;/code&gt; field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.
     * @param {number} [cache] &lt;h4&gt;Reset cache (if was enabled) and receive entities from the DB.&lt;/h4&gt;&lt;i&gt;Usage:&lt;/i&gt; &lt;strong&gt;?cache&#x3D;0&lt;/strong&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayTrendIdGet(id: number, fields?: string, join?: string, cache?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DayTrend>;
    /**
     *
     * @summary Update one DayTrend
     * @param {DayTrend} DayTrend
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayTrendIdPatch(DayTrend: DayTrend, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DayTrend>;
    /**
     *
     * @summary Replace one DayTrend
     * @param {DayTrend} DayTrend
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayTrendIdPut(DayTrend: DayTrend, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DayTrend>;
    /**
     *
     * @summary Create one DayTrend
     * @param {DayTrend} DayTrend
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayTrendPost(DayTrend: DayTrend, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DayTrend>;
    /**
     *
     * @summary Imports many trends and replace existing. Recomputes alerts
     * @param {number} sourceId
     * @param {DayTrendInputListDto} DayTrendInputListDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayTrendReplaceAllInSourceSourceIdPost(sourceId: number, DayTrendInputListDto: DayTrendInputListDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DayTrendListDto>;
};
/**
 * DayTrendApi - factory interface
 * @export
 */
export declare const DayTrendApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @summary Create many DayTrend
     * @param {GeneratedDayTrendBulkDto} GeneratedDayTrendBulkDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayTrendBulkPost(GeneratedDayTrendBulkDto: GeneratedDayTrendBulkDto, options?: any): Promise<DayTrend[]>;
    /**
     *
     * @summary Retrieve many DayTrend
     * @param {string} [fields] &lt;h4&gt;Selects fields that should be returned in the reponse body.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;field1,field2,...&lt;/strong&gt; &lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;email,name&lt;/strong&gt;
     * @param {string} [filter] &lt;h4&gt;Adds fields request condition (multiple conditions) to the request.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?filter&#x3D;field||condition||value&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt; &lt;ul&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;name||eq||batman&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;isVillain||eq||false&amp;filter&#x3D;city||eq||Arkham&lt;/strong&gt; (multiple filters are treated as a combination of AND type of conditions)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;shots||in||12,26&lt;/strong&gt; (some conditions accept multiple values separated by commas)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;power||isnull&lt;/strong&gt; (some conditions don&#39;t accept value)&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;Filter Conditions:&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;eq&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&#x3D;&lt;/code&gt;, equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;ne&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;!&#x3D;&lt;/code&gt;, not equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;gt&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;gt;&lt;/code&gt;, greater than)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;lt&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;lt;&lt;/code&gt;, lower that)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;gte&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;gt;&#x3D;&lt;/code&gt;, greater than or equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;lte&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;lt;&#x3D;&lt;/code&gt;, lower than or equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;starts&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;LIKE val%&lt;/code&gt;, starts with)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;ends&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;LIKE %val&lt;/code&gt;, ends with)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;cont&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;LIKE %val%&lt;/code&gt;, contains)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;excl&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;NOT LIKE %val%&lt;/code&gt;, not contains)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;in&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;IN&lt;/code&gt;, in range, &lt;strong&gt;&lt;em&gt;accepts multiple values&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;notin&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;NOT IN&lt;/code&gt;, not in range, &lt;strong&gt;&lt;em&gt;accepts multiple values&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;isnull&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;IS NULL&lt;/code&gt;, is NULL, &lt;strong&gt;&lt;em&gt;doesn&#39;t accept value&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;notnull&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;IS NOT NULL&lt;/code&gt;, not NULL, &lt;strong&gt;&lt;em&gt;doesn&#39;t accept value&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;between&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;BETWEEN&lt;/code&gt;, between, &lt;strong&gt;&lt;em&gt;accepts two values&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;/ul&gt;
     * @param {string} [or] &lt;h4&gt;Adds &lt;code&gt;OR&lt;/code&gt; conditions to the request.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?or&#x3D;field||condition||value&lt;/strong&gt;&lt;br/&gt;It uses the same conditions as the filter parameter&lt;br/&gt;&lt;i&gt;Rules and &lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;If there is only &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; present (without &lt;code&gt;filter&lt;/code&gt;) then it will be interpreted as simple filter:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?or&#x3D;name||eq||batman&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If there are &lt;strong&gt;multiple&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; present (without &lt;code&gt;filter&lt;/code&gt;) then it will be interpreted as a compination of &lt;code&gt;OR&lt;/code&gt; conditions, as follows:&lt;br&gt;&lt;code&gt;WHERE {or} OR {or} OR ...&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?or&#x3D;name||eq||batman&amp;or&#x3D;name||eq||joker&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If there are &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; and &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;filter&lt;/code&gt; then it will be interpreted as &lt;code&gt;OR&lt;/code&gt; condition, as follows:&lt;br&gt;&lt;code&gt;WHERE {filter} OR {or}&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;name||eq||batman&amp;or&#x3D;name||eq||joker&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If present &lt;strong&gt;both&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; in any amount (&lt;strong&gt;one&lt;/strong&gt; or &lt;strong&gt;miltiple&lt;/strong&gt; each) then both interpreted as a combitation of &lt;code&gt;AND&lt;/code&gt; conditions and compared with each other by &lt;code&gt;OR&lt;/code&gt; condition, as follows:&lt;br&gt;&lt;code&gt;WHERE ({filter} AND {filter} AND ...) OR ({or} AND {or} AND ...)&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;type||eq||hero&amp;filter&#x3D;status||eq||alive&amp;or&#x3D;type||eq||villain&amp;or&#x3D;status||eq||dead&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;
     * @param {string} [sort] &lt;h4&gt;Adds sort by field (by multiple fields) and order to query result.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?sort&#x3D;field,ASC|DESC&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?sort&#x3D;name,ASC&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?sort&#x3D;name,ASC&amp;sort&#x3D;id,DESC&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;
     * @param {string} [join] &lt;h4&gt;Receive joined relational objects in GET result (with all or selected fields).&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation||field1,field2,...&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1||field11,field12,...&amp;join&#x3D;relation1.nested||field21,field22,...&amp;join&#x3D;...&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&amp;join&#x3D;notifications||content&amp;join&#x3D;tasks&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1&amp;join&#x3D;relation1.nested&amp;join&#x3D;relation1.nested.deepnested&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;strong&gt;&lt;i&gt;Notice:&lt;/i&gt;&lt;/strong&gt; &lt;code&gt;id&lt;/code&gt; field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.
     * @param {number} [per_page] &lt;h4&gt;Receive &lt;code&gt;N&lt;/code&gt; amount of entities.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?per_page&#x3D;number&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?per_page&#x3D;10&lt;/strong&gt;
     * @param {number} [offset] &lt;h4&gt;Offset &lt;code&gt;N&lt;/code&gt; amount of entities.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?offset&#x3D;number&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?offset&#x3D;10&lt;/strong&gt;
     * @param {number} [page] &lt;h4&gt;Receive a portion of &lt;code&gt;limit&lt;/code&gt; entities (alternative to &lt;code&gt;offset&lt;/code&gt;). Will be applied if &lt;code&gt;limit&lt;/code&gt; is set up.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?page&#x3D;number&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?page&#x3D;2&lt;/strong&gt;
     * @param {number} [cache] &lt;h4&gt;Reset cache (if was enabled) and receive entities from the DB.&lt;/h4&gt;&lt;i&gt;Usage:&lt;/i&gt; &lt;strong&gt;?cache&#x3D;0&lt;/strong&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayTrendGet(fields?: string, filter?: string, or?: string, sort?: string, join?: string, per_page?: number, offset?: number, page?: number, cache?: number, options?: any): Promise<DayTrend[]>;
    /**
     *
     * @summary Delete one DayTrend
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayTrendIdDelete(id: number, options?: any): Promise<DayTrend>;
    /**
     *
     * @summary Retrieve one DayTrend
     * @param {number} id
     * @param {string} [fields] &lt;h4&gt;Selects fields that should be returned in the reponse body.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;field1,field2,...&lt;/strong&gt; &lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;email,name&lt;/strong&gt;
     * @param {string} [join] &lt;h4&gt;Receive joined relational objects in GET result (with all or selected fields).&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation||field1,field2,...&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1||field11,field12,...&amp;join&#x3D;relation1.nested||field21,field22,...&amp;join&#x3D;...&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&amp;join&#x3D;notifications||content&amp;join&#x3D;tasks&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1&amp;join&#x3D;relation1.nested&amp;join&#x3D;relation1.nested.deepnested&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;strong&gt;&lt;i&gt;Notice:&lt;/i&gt;&lt;/strong&gt; &lt;code&gt;id&lt;/code&gt; field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.
     * @param {number} [cache] &lt;h4&gt;Reset cache (if was enabled) and receive entities from the DB.&lt;/h4&gt;&lt;i&gt;Usage:&lt;/i&gt; &lt;strong&gt;?cache&#x3D;0&lt;/strong&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayTrendIdGet(id: number, fields?: string, join?: string, cache?: number, options?: any): Promise<DayTrend>;
    /**
     *
     * @summary Update one DayTrend
     * @param {DayTrend} DayTrend
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayTrendIdPatch(DayTrend: DayTrend, id: number, options?: any): Promise<DayTrend>;
    /**
     *
     * @summary Replace one DayTrend
     * @param {DayTrend} DayTrend
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayTrendIdPut(DayTrend: DayTrend, id: number, options?: any): Promise<DayTrend>;
    /**
     *
     * @summary Create one DayTrend
     * @param {DayTrend} DayTrend
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayTrendPost(DayTrend: DayTrend, options?: any): Promise<DayTrend>;
    /**
     *
     * @summary Imports many trends and replace existing. Recomputes alerts
     * @param {number} sourceId
     * @param {DayTrendInputListDto} DayTrendInputListDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1DayTrendReplaceAllInSourceSourceIdPost(sourceId: number, DayTrendInputListDto: DayTrendInputListDto, options?: any): Promise<DayTrendListDto>;
};
/**
 * DayTrendApi - object-oriented interface
 * @export
 * @class DayTrendApi
 * @extends {BaseAPI}
 */
export declare class DayTrendApi extends BaseAPI {
    /**
     *
     * @summary Create many DayTrend
     * @param {GeneratedDayTrendBulkDto} GeneratedDayTrendBulkDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DayTrendApi
     */
    v1DayTrendBulkPost(GeneratedDayTrendBulkDto: GeneratedDayTrendBulkDto, options?: any): Promise<DayTrend[]>;
    /**
     *
     * @summary Retrieve many DayTrend
     * @param {string} [fields] &lt;h4&gt;Selects fields that should be returned in the reponse body.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;field1,field2,...&lt;/strong&gt; &lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;email,name&lt;/strong&gt;
     * @param {string} [filter] &lt;h4&gt;Adds fields request condition (multiple conditions) to the request.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?filter&#x3D;field||condition||value&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt; &lt;ul&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;name||eq||batman&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;isVillain||eq||false&amp;filter&#x3D;city||eq||Arkham&lt;/strong&gt; (multiple filters are treated as a combination of AND type of conditions)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;shots||in||12,26&lt;/strong&gt; (some conditions accept multiple values separated by commas)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;power||isnull&lt;/strong&gt; (some conditions don&#39;t accept value)&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;Filter Conditions:&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;eq&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&#x3D;&lt;/code&gt;, equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;ne&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;!&#x3D;&lt;/code&gt;, not equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;gt&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;gt;&lt;/code&gt;, greater than)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;lt&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;lt;&lt;/code&gt;, lower that)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;gte&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;gt;&#x3D;&lt;/code&gt;, greater than or equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;lte&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;lt;&#x3D;&lt;/code&gt;, lower than or equal)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;starts&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;LIKE val%&lt;/code&gt;, starts with)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;ends&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;LIKE %val&lt;/code&gt;, ends with)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;cont&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;LIKE %val%&lt;/code&gt;, contains)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;excl&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;NOT LIKE %val%&lt;/code&gt;, not contains)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;in&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;IN&lt;/code&gt;, in range, &lt;strong&gt;&lt;em&gt;accepts multiple values&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;notin&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;NOT IN&lt;/code&gt;, not in range, &lt;strong&gt;&lt;em&gt;accepts multiple values&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;isnull&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;IS NULL&lt;/code&gt;, is NULL, &lt;strong&gt;&lt;em&gt;doesn&#39;t accept value&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;notnull&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;IS NOT NULL&lt;/code&gt;, not NULL, &lt;strong&gt;&lt;em&gt;doesn&#39;t accept value&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;between&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;BETWEEN&lt;/code&gt;, between, &lt;strong&gt;&lt;em&gt;accepts two values&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;&lt;/ul&gt;
     * @param {string} [or] &lt;h4&gt;Adds &lt;code&gt;OR&lt;/code&gt; conditions to the request.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?or&#x3D;field||condition||value&lt;/strong&gt;&lt;br/&gt;It uses the same conditions as the filter parameter&lt;br/&gt;&lt;i&gt;Rules and &lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;If there is only &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; present (without &lt;code&gt;filter&lt;/code&gt;) then it will be interpreted as simple filter:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?or&#x3D;name||eq||batman&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If there are &lt;strong&gt;multiple&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; present (without &lt;code&gt;filter&lt;/code&gt;) then it will be interpreted as a compination of &lt;code&gt;OR&lt;/code&gt; conditions, as follows:&lt;br&gt;&lt;code&gt;WHERE {or} OR {or} OR ...&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?or&#x3D;name||eq||batman&amp;or&#x3D;name||eq||joker&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If there are &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; and &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;filter&lt;/code&gt; then it will be interpreted as &lt;code&gt;OR&lt;/code&gt; condition, as follows:&lt;br&gt;&lt;code&gt;WHERE {filter} OR {or}&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;name||eq||batman&amp;or&#x3D;name||eq||joker&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;If present &lt;strong&gt;both&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; in any amount (&lt;strong&gt;one&lt;/strong&gt; or &lt;strong&gt;miltiple&lt;/strong&gt; each) then both interpreted as a combitation of &lt;code&gt;AND&lt;/code&gt; conditions and compared with each other by &lt;code&gt;OR&lt;/code&gt; condition, as follows:&lt;br&gt;&lt;code&gt;WHERE ({filter} AND {filter} AND ...) OR ({or} AND {or} AND ...)&lt;/code&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?filter&#x3D;type||eq||hero&amp;filter&#x3D;status||eq||alive&amp;or&#x3D;type||eq||villain&amp;or&#x3D;status||eq||dead&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;
     * @param {string} [sort] &lt;h4&gt;Adds sort by field (by multiple fields) and order to query result.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?sort&#x3D;field,ASC|DESC&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?sort&#x3D;name,ASC&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?sort&#x3D;name,ASC&amp;sort&#x3D;id,DESC&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;
     * @param {string} [join] &lt;h4&gt;Receive joined relational objects in GET result (with all or selected fields).&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation||field1,field2,...&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1||field11,field12,...&amp;join&#x3D;relation1.nested||field21,field22,...&amp;join&#x3D;...&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&amp;join&#x3D;notifications||content&amp;join&#x3D;tasks&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1&amp;join&#x3D;relation1.nested&amp;join&#x3D;relation1.nested.deepnested&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;strong&gt;&lt;i&gt;Notice:&lt;/i&gt;&lt;/strong&gt; &lt;code&gt;id&lt;/code&gt; field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.
     * @param {number} [per_page] &lt;h4&gt;Receive &lt;code&gt;N&lt;/code&gt; amount of entities.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?per_page&#x3D;number&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?per_page&#x3D;10&lt;/strong&gt;
     * @param {number} [offset] &lt;h4&gt;Offset &lt;code&gt;N&lt;/code&gt; amount of entities.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?offset&#x3D;number&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?offset&#x3D;10&lt;/strong&gt;
     * @param {number} [page] &lt;h4&gt;Receive a portion of &lt;code&gt;limit&lt;/code&gt; entities (alternative to &lt;code&gt;offset&lt;/code&gt;). Will be applied if &lt;code&gt;limit&lt;/code&gt; is set up.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?page&#x3D;number&lt;/strong&gt;&lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?page&#x3D;2&lt;/strong&gt;
     * @param {number} [cache] &lt;h4&gt;Reset cache (if was enabled) and receive entities from the DB.&lt;/h4&gt;&lt;i&gt;Usage:&lt;/i&gt; &lt;strong&gt;?cache&#x3D;0&lt;/strong&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DayTrendApi
     */
    v1DayTrendGet(fields?: string, filter?: string, or?: string, sort?: string, join?: string, per_page?: number, offset?: number, page?: number, cache?: number, options?: any): Promise<DayTrend[]>;
    /**
     *
     * @summary Delete one DayTrend
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DayTrendApi
     */
    v1DayTrendIdDelete(id: number, options?: any): Promise<DayTrend>;
    /**
     *
     * @summary Retrieve one DayTrend
     * @param {number} id
     * @param {string} [fields] &lt;h4&gt;Selects fields that should be returned in the reponse body.&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;field1,field2,...&lt;/strong&gt; &lt;br/&gt;&lt;i&gt;Example:&lt;/i&gt; &lt;strong&gt;?fields&#x3D;email,name&lt;/strong&gt;
     * @param {string} [join] &lt;h4&gt;Receive joined relational objects in GET result (with all or selected fields).&lt;/h4&gt;&lt;i&gt;Syntax:&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation||field1,field2,...&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1||field11,field12,...&amp;join&#x3D;relation1.nested||field21,field22,...&amp;join&#x3D;...&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;i&gt;Examples:&lt;/i&gt;&lt;/i&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;profile||firstName,email&amp;join&#x3D;notifications||content&amp;join&#x3D;tasks&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;?join&#x3D;relation1&amp;join&#x3D;relation1.nested&amp;join&#x3D;relation1.nested.deepnested&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;strong&gt;&lt;i&gt;Notice:&lt;/i&gt;&lt;/strong&gt; &lt;code&gt;id&lt;/code&gt; field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.
     * @param {number} [cache] &lt;h4&gt;Reset cache (if was enabled) and receive entities from the DB.&lt;/h4&gt;&lt;i&gt;Usage:&lt;/i&gt; &lt;strong&gt;?cache&#x3D;0&lt;/strong&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DayTrendApi
     */
    v1DayTrendIdGet(id: number, fields?: string, join?: string, cache?: number, options?: any): Promise<DayTrend>;
    /**
     *
     * @summary Update one DayTrend
     * @param {DayTrend} DayTrend
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DayTrendApi
     */
    v1DayTrendIdPatch(DayTrend: DayTrend, id: number, options?: any): Promise<DayTrend>;
    /**
     *
     * @summary Replace one DayTrend
     * @param {DayTrend} DayTrend
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DayTrendApi
     */
    v1DayTrendIdPut(DayTrend: DayTrend, id: number, options?: any): Promise<DayTrend>;
    /**
     *
     * @summary Create one DayTrend
     * @param {DayTrend} DayTrend
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DayTrendApi
     */
    v1DayTrendPost(DayTrend: DayTrend, options?: any): Promise<DayTrend>;
    /**
     *
     * @summary Imports many trends and replace existing. Recomputes alerts
     * @param {number} sourceId
     * @param {DayTrendInputListDto} DayTrendInputListDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DayTrendApi
     */
    v1DayTrendReplaceAllInSourceSourceIdPost(sourceId: number, DayTrendInputListDto: DayTrendInputListDto, options?: any): Promise<DayTrendListDto>;
}
/**
 * ImportApi - fetch parameter creator
 * @export
 */
export declare const ImportApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a source, add a first batch of day data, then computes the models for the first time.
     * @summary First source creation
     * @param {CreateSourceDto} CreateSourceDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ImportCreateSourcePost(CreateSourceDto: CreateSourceDto, options?: any): FetchArgs;
    /**
     * When new data is added, we compute alerts for this data
     * @summary Add new data to a source
     * @param {ImportDaysDto} ImportDaysDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ImportDaysPost(ImportDaysDto: ImportDaysDto, options?: any): FetchArgs;
    /**
     * Compute maps, alerts and closest models
     * @summary Reprocess days from database
     * @param {number} year
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ImportReprocessDaysSourceIdYearPost(year: number, sourceId: number, options?: any): FetchArgs;
    /**
     * When new data is added, we compute alerts for this data
     * @summary Add new data to a source
     * @param {number} sourceId
     * @param {ImportDaysDto} ImportDaysDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ImportSourceIdDaysPost(sourceId: number, ImportDaysDto: ImportDaysDto, options?: any): FetchArgs;
};
/**
 * ImportApi - functional programming interface
 * @export
 */
export declare const ImportApiFp: (configuration?: Configuration) => {
    /**
     * Creates a source, add a first batch of day data, then computes the models for the first time.
     * @summary First source creation
     * @param {CreateSourceDto} CreateSourceDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ImportCreateSourcePost(CreateSourceDto: CreateSourceDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     * When new data is added, we compute alerts for this data
     * @summary Add new data to a source
     * @param {ImportDaysDto} ImportDaysDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ImportDaysPost(ImportDaysDto: ImportDaysDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     * Compute maps, alerts and closest models
     * @summary Reprocess days from database
     * @param {number} year
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ImportReprocessDaysSourceIdYearPost(year: number, sourceId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     * When new data is added, we compute alerts for this data
     * @summary Add new data to a source
     * @param {number} sourceId
     * @param {ImportDaysDto} ImportDaysDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ImportSourceIdDaysPost(sourceId: number, ImportDaysDto: ImportDaysDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
};
/**
 * ImportApi - factory interface
 * @export
 */
export declare const ImportApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     * Creates a source, add a first batch of day data, then computes the models for the first time.
     * @summary First source creation
     * @param {CreateSourceDto} CreateSourceDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ImportCreateSourcePost(CreateSourceDto: CreateSourceDto, options?: any): Promise<Response>;
    /**
     * When new data is added, we compute alerts for this data
     * @summary Add new data to a source
     * @param {ImportDaysDto} ImportDaysDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ImportDaysPost(ImportDaysDto: ImportDaysDto, options?: any): Promise<Response>;
    /**
     * Compute maps, alerts and closest models
     * @summary Reprocess days from database
     * @param {number} year
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ImportReprocessDaysSourceIdYearPost(year: number, sourceId: number, options?: any): Promise<Response>;
    /**
     * When new data is added, we compute alerts for this data
     * @summary Add new data to a source
     * @param {number} sourceId
     * @param {ImportDaysDto} ImportDaysDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ImportSourceIdDaysPost(sourceId: number, ImportDaysDto: ImportDaysDto, options?: any): Promise<Response>;
};
/**
 * ImportApi - object-oriented interface
 * @export
 * @class ImportApi
 * @extends {BaseAPI}
 */
export declare class ImportApi extends BaseAPI {
    /**
     * Creates a source, add a first batch of day data, then computes the models for the first time.
     * @summary First source creation
     * @param {CreateSourceDto} CreateSourceDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportApi
     */
    v1ImportCreateSourcePost(CreateSourceDto: CreateSourceDto, options?: any): Promise<Response>;
    /**
     * When new data is added, we compute alerts for this data
     * @summary Add new data to a source
     * @param {ImportDaysDto} ImportDaysDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportApi
     */
    v1ImportDaysPost(ImportDaysDto: ImportDaysDto, options?: any): Promise<Response>;
    /**
     * Compute maps, alerts and closest models
     * @summary Reprocess days from database
     * @param {number} year
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportApi
     */
    v1ImportReprocessDaysSourceIdYearPost(year: number, sourceId: number, options?: any): Promise<Response>;
    /**
     * When new data is added, we compute alerts for this data
     * @summary Add new data to a source
     * @param {number} sourceId
     * @param {ImportDaysDto} ImportDaysDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportApi
     */
    v1ImportSourceIdDaysPost(sourceId: number, ImportDaysDto: ImportDaysDto, options?: any): Promise<Response>;
}
/**
 * ModelApi - fetch parameter creator
 * @export
 */
export declare const ModelApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     * Update many models at once, mainly used to set color and name of the model
     * @summary Model bulk update
     * @param {ModelsPatchDto} ModelsPatchDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ModelBulkPatch(ModelsPatchDto: ModelsPatchDto, options?: any): FetchArgs;
    /**
     *
     * @summary List models data of this source
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ModelListSourceIdGet(sourceId: number, options?: any): FetchArgs;
};
/**
 * ModelApi - functional programming interface
 * @export
 */
export declare const ModelApiFp: (configuration?: Configuration) => {
    /**
     * Update many models at once, mainly used to set color and name of the model
     * @summary Model bulk update
     * @param {ModelsPatchDto} ModelsPatchDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ModelBulkPatch(ModelsPatchDto: ModelsPatchDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelListDto>;
    /**
     *
     * @summary List models data of this source
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ModelListSourceIdGet(sourceId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelListDto>;
};
/**
 * ModelApi - factory interface
 * @export
 */
export declare const ModelApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     * Update many models at once, mainly used to set color and name of the model
     * @summary Model bulk update
     * @param {ModelsPatchDto} ModelsPatchDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ModelBulkPatch(ModelsPatchDto: ModelsPatchDto, options?: any): Promise<ModelListDto>;
    /**
     *
     * @summary List models data of this source
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ModelListSourceIdGet(sourceId: number, options?: any): Promise<ModelListDto>;
};
/**
 * ModelApi - object-oriented interface
 * @export
 * @class ModelApi
 * @extends {BaseAPI}
 */
export declare class ModelApi extends BaseAPI {
    /**
     * Update many models at once, mainly used to set color and name of the model
     * @summary Model bulk update
     * @param {ModelsPatchDto} ModelsPatchDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelApi
     */
    v1ModelBulkPatch(ModelsPatchDto: ModelsPatchDto, options?: any): Promise<ModelListDto>;
    /**
     *
     * @summary List models data of this source
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelApi
     */
    v1ModelListSourceIdGet(sourceId: number, options?: any): Promise<ModelListDto>;
}
/**
 * PrevisionApi - fetch parameter creator
 * @export
 */
export declare const PrevisionApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Apply a source prevision to the whole group
     * @param {PrevisionApplyGroupDto} PrevisionApplyGroupDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1PrevisionGroupApplyPrevisionPost(PrevisionApplyGroupDto: PrevisionApplyGroupDto, options?: any): FetchArgs;
    /**
     *
     * @summary Fetch data previsions for a given year
     * @param {number} year
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1PrevisionListSourceIdYearGet(year: number, sourceId: number, options?: any): FetchArgs;
    /**
     *
     * @summary Generate default previsions for the source and save them
     * @param {number} year
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1PrevisionSaveDefaultPrevisionsSourceIdYearPost(year: number, sourceId: number, options?: any): FetchArgs;
    /**
     *
     * @summary Save many previsions at once
     * @param {PrevisionBulkSaveDto} PrevisionBulkSaveDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1PrevisionSavePost(PrevisionBulkSaveDto: PrevisionBulkSaveDto, options?: any): FetchArgs;
    /**
     *
     * @summary Update a specific prevision
     * @param {PrevisionPatchDto} PrevisionPatchDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1PrevisionUpdatePatch(PrevisionPatchDto: PrevisionPatchDto, options?: any): FetchArgs;
};
/**
 * PrevisionApi - functional programming interface
 * @export
 */
export declare const PrevisionApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Apply a source prevision to the whole group
     * @param {PrevisionApplyGroupDto} PrevisionApplyGroupDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1PrevisionGroupApplyPrevisionPost(PrevisionApplyGroupDto: PrevisionApplyGroupDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PrevisionApplyGroupResponseDto>;
    /**
     *
     * @summary Fetch data previsions for a given year
     * @param {number} year
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1PrevisionListSourceIdYearGet(year: number, sourceId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PrevisionListDto>;
    /**
     *
     * @summary Generate default previsions for the source and save them
     * @param {number} year
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1PrevisionSaveDefaultPrevisionsSourceIdYearPost(year: number, sourceId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PrevisionBulkSaveResultDto>;
    /**
     *
     * @summary Save many previsions at once
     * @param {PrevisionBulkSaveDto} PrevisionBulkSaveDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1PrevisionSavePost(PrevisionBulkSaveDto: PrevisionBulkSaveDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PrevisionBulkSaveResultDto>;
    /**
     *
     * @summary Update a specific prevision
     * @param {PrevisionPatchDto} PrevisionPatchDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1PrevisionUpdatePatch(PrevisionPatchDto: PrevisionPatchDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PrevisionUpdateResultDto>;
};
/**
 * PrevisionApi - factory interface
 * @export
 */
export declare const PrevisionApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @summary Apply a source prevision to the whole group
     * @param {PrevisionApplyGroupDto} PrevisionApplyGroupDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1PrevisionGroupApplyPrevisionPost(PrevisionApplyGroupDto: PrevisionApplyGroupDto, options?: any): Promise<PrevisionApplyGroupResponseDto>;
    /**
     *
     * @summary Fetch data previsions for a given year
     * @param {number} year
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1PrevisionListSourceIdYearGet(year: number, sourceId: number, options?: any): Promise<PrevisionListDto>;
    /**
     *
     * @summary Generate default previsions for the source and save them
     * @param {number} year
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1PrevisionSaveDefaultPrevisionsSourceIdYearPost(year: number, sourceId: number, options?: any): Promise<PrevisionBulkSaveResultDto>;
    /**
     *
     * @summary Save many previsions at once
     * @param {PrevisionBulkSaveDto} PrevisionBulkSaveDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1PrevisionSavePost(PrevisionBulkSaveDto: PrevisionBulkSaveDto, options?: any): Promise<PrevisionBulkSaveResultDto>;
    /**
     *
     * @summary Update a specific prevision
     * @param {PrevisionPatchDto} PrevisionPatchDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1PrevisionUpdatePatch(PrevisionPatchDto: PrevisionPatchDto, options?: any): Promise<PrevisionUpdateResultDto>;
};
/**
 * PrevisionApi - object-oriented interface
 * @export
 * @class PrevisionApi
 * @extends {BaseAPI}
 */
export declare class PrevisionApi extends BaseAPI {
    /**
     *
     * @summary Apply a source prevision to the whole group
     * @param {PrevisionApplyGroupDto} PrevisionApplyGroupDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrevisionApi
     */
    v1PrevisionGroupApplyPrevisionPost(PrevisionApplyGroupDto: PrevisionApplyGroupDto, options?: any): Promise<PrevisionApplyGroupResponseDto>;
    /**
     *
     * @summary Fetch data previsions for a given year
     * @param {number} year
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrevisionApi
     */
    v1PrevisionListSourceIdYearGet(year: number, sourceId: number, options?: any): Promise<PrevisionListDto>;
    /**
     *
     * @summary Generate default previsions for the source and save them
     * @param {number} year
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrevisionApi
     */
    v1PrevisionSaveDefaultPrevisionsSourceIdYearPost(year: number, sourceId: number, options?: any): Promise<PrevisionBulkSaveResultDto>;
    /**
     *
     * @summary Save many previsions at once
     * @param {PrevisionBulkSaveDto} PrevisionBulkSaveDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrevisionApi
     */
    v1PrevisionSavePost(PrevisionBulkSaveDto: PrevisionBulkSaveDto, options?: any): Promise<PrevisionBulkSaveResultDto>;
    /**
     *
     * @summary Update a specific prevision
     * @param {PrevisionPatchDto} PrevisionPatchDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrevisionApi
     */
    v1PrevisionUpdatePatch(PrevisionPatchDto: PrevisionPatchDto, options?: any): Promise<PrevisionUpdateResultDto>;
}
/**
 * SourceApi - fetch parameter creator
 * @export
 */
export declare const SourceApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary All user sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SourceListGet(options?: any): FetchArgs;
    /**
     *
     * @summary Delete a source and all linked data
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SourceSourceIdDelete(sourceId: number, options?: any): FetchArgs;
    /**
     *
     * @summary Update a source group
     * @param {SourcePatchGroupDto} SourcePatchGroupDto
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SourceSourceIdGroupPatch(SourcePatchGroupDto: SourcePatchGroupDto, sourceId: number, options?: any): FetchArgs;
    /**
     *
     * @summary Update a source
     * @param {SourcePatchDto} SourcePatchDto
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SourceSourceIdPatch(SourcePatchDto: SourcePatchDto, sourceId: number, options?: any): FetchArgs;
};
/**
 * SourceApi - functional programming interface
 * @export
 */
export declare const SourceApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary All user sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SourceListGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SourceListDto>;
    /**
     *
     * @summary Delete a source and all linked data
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SourceSourceIdDelete(sourceId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Update a source group
     * @param {SourcePatchGroupDto} SourcePatchGroupDto
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SourceSourceIdGroupPatch(SourcePatchGroupDto: SourcePatchGroupDto, sourceId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SourceDto>;
    /**
     *
     * @summary Update a source
     * @param {SourcePatchDto} SourcePatchDto
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SourceSourceIdPatch(SourcePatchDto: SourcePatchDto, sourceId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SourceDto>;
};
/**
 * SourceApi - factory interface
 * @export
 */
export declare const SourceApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @summary All user sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SourceListGet(options?: any): Promise<SourceListDto>;
    /**
     *
     * @summary Delete a source and all linked data
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SourceSourceIdDelete(sourceId: number, options?: any): Promise<Response>;
    /**
     *
     * @summary Update a source group
     * @param {SourcePatchGroupDto} SourcePatchGroupDto
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SourceSourceIdGroupPatch(SourcePatchGroupDto: SourcePatchGroupDto, sourceId: number, options?: any): Promise<SourceDto>;
    /**
     *
     * @summary Update a source
     * @param {SourcePatchDto} SourcePatchDto
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SourceSourceIdPatch(SourcePatchDto: SourcePatchDto, sourceId: number, options?: any): Promise<SourceDto>;
};
/**
 * SourceApi - object-oriented interface
 * @export
 * @class SourceApi
 * @extends {BaseAPI}
 */
export declare class SourceApi extends BaseAPI {
    /**
     *
     * @summary All user sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApi
     */
    v1SourceListGet(options?: any): Promise<SourceListDto>;
    /**
     *
     * @summary Delete a source and all linked data
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApi
     */
    v1SourceSourceIdDelete(sourceId: number, options?: any): Promise<Response>;
    /**
     *
     * @summary Update a source group
     * @param {SourcePatchGroupDto} SourcePatchGroupDto
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApi
     */
    v1SourceSourceIdGroupPatch(SourcePatchGroupDto: SourcePatchGroupDto, sourceId: number, options?: any): Promise<SourceDto>;
    /**
     *
     * @summary Update a source
     * @param {SourcePatchDto} SourcePatchDto
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceApi
     */
    v1SourceSourceIdPatch(SourcePatchDto: SourcePatchDto, sourceId: number, options?: any): Promise<SourceDto>;
}
/**
 * SourceGroupApi - fetch parameter creator
 * @export
 */
export declare const SourceGroupApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a new source groups
     * @param {SourceGroupCreateDto} SourceGroupCreateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SourceGroupCreatePost(SourceGroupCreateDto: SourceGroupCreateDto, options?: any): FetchArgs;
    /**
     *
     * @summary Updates a group configuration
     * @param {SourceGroupPatchDto} SourceGroupPatchDto
     * @param {number} groupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SourceGroupGroupIdPatch(SourceGroupPatchDto: SourceGroupPatchDto, groupId: number, options?: any): FetchArgs;
    /**
     *
     * @summary All source groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SourceGroupListGet(options?: any): FetchArgs;
};
/**
 * SourceGroupApi - functional programming interface
 * @export
 */
export declare const SourceGroupApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a new source groups
     * @param {SourceGroupCreateDto} SourceGroupCreateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SourceGroupCreatePost(SourceGroupCreateDto: SourceGroupCreateDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SourceGroupDto>;
    /**
     *
     * @summary Updates a group configuration
     * @param {SourceGroupPatchDto} SourceGroupPatchDto
     * @param {number} groupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SourceGroupGroupIdPatch(SourceGroupPatchDto: SourceGroupPatchDto, groupId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SourceGroupDto>;
    /**
     *
     * @summary All source groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SourceGroupListGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SourceGroupListDto>;
};
/**
 * SourceGroupApi - factory interface
 * @export
 */
export declare const SourceGroupApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @summary Create a new source groups
     * @param {SourceGroupCreateDto} SourceGroupCreateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SourceGroupCreatePost(SourceGroupCreateDto: SourceGroupCreateDto, options?: any): Promise<SourceGroupDto>;
    /**
     *
     * @summary Updates a group configuration
     * @param {SourceGroupPatchDto} SourceGroupPatchDto
     * @param {number} groupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SourceGroupGroupIdPatch(SourceGroupPatchDto: SourceGroupPatchDto, groupId: number, options?: any): Promise<SourceGroupDto>;
    /**
     *
     * @summary All source groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1SourceGroupListGet(options?: any): Promise<SourceGroupListDto>;
};
/**
 * SourceGroupApi - object-oriented interface
 * @export
 * @class SourceGroupApi
 * @extends {BaseAPI}
 */
export declare class SourceGroupApi extends BaseAPI {
    /**
     *
     * @summary Create a new source groups
     * @param {SourceGroupCreateDto} SourceGroupCreateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceGroupApi
     */
    v1SourceGroupCreatePost(SourceGroupCreateDto: SourceGroupCreateDto, options?: any): Promise<SourceGroupDto>;
    /**
     *
     * @summary Updates a group configuration
     * @param {SourceGroupPatchDto} SourceGroupPatchDto
     * @param {number} groupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceGroupApi
     */
    v1SourceGroupGroupIdPatch(SourceGroupPatchDto: SourceGroupPatchDto, groupId: number, options?: any): Promise<SourceGroupDto>;
    /**
     *
     * @summary All source groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceGroupApi
     */
    v1SourceGroupListGet(options?: any): Promise<SourceGroupListDto>;
}
/**
 * UserApi - fetch parameter creator
 * @export
 */
export declare const UserApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     * This endpoints returns the jwt and sets a cookie with the same jwt.      This way you can use it from both an api and a browser
     * @summary Log the user in
     * @param {LoginDto} LoginDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UserLoginPost(LoginDto: LoginDto, options?: any): FetchArgs;
    /**
     * Must be authenticated to call this endpoint
     * @summary Retrieve current user information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UserMeGet(options?: any): FetchArgs;
    /**
     *
     * @param {RequestDemoDto} RequestDemoDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UserRegisterDemoPost(RequestDemoDto: RequestDemoDto, options?: any): FetchArgs;
};
/**
 * UserApi - functional programming interface
 * @export
 */
export declare const UserApiFp: (configuration?: Configuration) => {
    /**
     * This endpoints returns the jwt and sets a cookie with the same jwt.      This way you can use it from both an api and a browser
     * @summary Log the user in
     * @param {LoginDto} LoginDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UserLoginPost(LoginDto: LoginDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LoginResponseDto>;
    /**
     * Must be authenticated to call this endpoint
     * @summary Retrieve current user information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UserMeGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserDto>;
    /**
     *
     * @param {RequestDemoDto} RequestDemoDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UserRegisterDemoPost(RequestDemoDto: RequestDemoDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LoginResponseDto>;
};
/**
 * UserApi - factory interface
 * @export
 */
export declare const UserApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     * This endpoints returns the jwt and sets a cookie with the same jwt.      This way you can use it from both an api and a browser
     * @summary Log the user in
     * @param {LoginDto} LoginDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UserLoginPost(LoginDto: LoginDto, options?: any): Promise<LoginResponseDto>;
    /**
     * Must be authenticated to call this endpoint
     * @summary Retrieve current user information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UserMeGet(options?: any): Promise<UserDto>;
    /**
     *
     * @param {RequestDemoDto} RequestDemoDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1UserRegisterDemoPost(RequestDemoDto: RequestDemoDto, options?: any): Promise<LoginResponseDto>;
};
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export declare class UserApi extends BaseAPI {
    /**
     * This endpoints returns the jwt and sets a cookie with the same jwt.      This way you can use it from both an api and a browser
     * @summary Log the user in
     * @param {LoginDto} LoginDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    v1UserLoginPost(LoginDto: LoginDto, options?: any): Promise<LoginResponseDto>;
    /**
     * Must be authenticated to call this endpoint
     * @summary Retrieve current user information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    v1UserMeGet(options?: any): Promise<UserDto>;
    /**
     *
     * @param {RequestDemoDto} RequestDemoDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    v1UserRegisterDemoPost(RequestDemoDto: RequestDemoDto, options?: any): Promise<LoginResponseDto>;
}
/**
 * ViewHelperApi - fetch parameter creator
 * @export
 */
export declare const ViewHelperApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get the alert view data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ViewHelperAlertsGet(options?: any): FetchArgs;
    /**
     *
     * @summary Get the alert referential view data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ViewHelperAlertsRefGet(options?: any): FetchArgs;
    /**
     *
     * @summary Get the alert modal view data
     * @param {string} dayDate
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ViewHelperDaysNearDateSourceIdDayDateGet(dayDate: string, sourceId: number, options?: any): FetchArgs;
};
/**
 * ViewHelperApi - functional programming interface
 * @export
 */
export declare const ViewHelperApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get the alert view data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ViewHelperAlertsGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response>;
    /**
     *
     * @summary Get the alert referential view data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ViewHelperAlertsRefGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AlertRefResultDto>;
    /**
     *
     * @summary Get the alert modal view data
     * @param {string} dayDate
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ViewHelperDaysNearDateSourceIdDayDateGet(dayDate: string, sourceId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DaysNearDateResultDto>;
};
/**
 * ViewHelperApi - factory interface
 * @export
 */
export declare const ViewHelperApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @summary Get the alert view data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ViewHelperAlertsGet(options?: any): Promise<Response>;
    /**
     *
     * @summary Get the alert referential view data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ViewHelperAlertsRefGet(options?: any): Promise<AlertRefResultDto>;
    /**
     *
     * @summary Get the alert modal view data
     * @param {string} dayDate
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1ViewHelperDaysNearDateSourceIdDayDateGet(dayDate: string, sourceId: number, options?: any): Promise<DaysNearDateResultDto>;
};
/**
 * ViewHelperApi - object-oriented interface
 * @export
 * @class ViewHelperApi
 * @extends {BaseAPI}
 */
export declare class ViewHelperApi extends BaseAPI {
    /**
     *
     * @summary Get the alert view data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewHelperApi
     */
    v1ViewHelperAlertsGet(options?: any): Promise<Response>;
    /**
     *
     * @summary Get the alert referential view data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewHelperApi
     */
    v1ViewHelperAlertsRefGet(options?: any): Promise<AlertRefResultDto>;
    /**
     *
     * @summary Get the alert modal view data
     * @param {string} dayDate
     * @param {number} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewHelperApi
     */
    v1ViewHelperDaysNearDateSourceIdDayDateGet(dayDate: string, sourceId: number, options?: any): Promise<DaysNearDateResultDto>;
}
